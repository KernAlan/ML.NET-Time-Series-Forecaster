<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BT.Core</name>
    </assembly>
    <members>
        <member name="T:BT.Core.ADO.ADOCommand">
            <summary>
            Create a new statement: New ADOCommand("SELECT XXX")
            Create a multi-statement SQL call:
            <code>
            cSQL = new ADOCommand()
            cSQL.AddSQL("DECLARE @DT datetime")
            cSQL.AddSQL("SELECT @DT=MIN(Dt) FROM tblX")
            cSQL.AddSQL("SELECT * FROM XXX WHERE StartDt>@DT")
            </code>
            </summary>
        </member>
        <member name="P:BT.Core.ADO.ADOCommand.SQL">
            <summary>
            Getting SQL will return the statement (if you specified more than 1 statement (using AddSQL), then commands are returned separated by ";"+vbcrLf
            SETING SQL will remove existing statements and replace them with the one you set here.  To setup a multi-statement SQL command, use AddSQL instead.
            </summary>
        </member>
        <member name="M:BT.Core.ADO.ADOCommand.AddSQL(System.String)">
            <summary>
            Useful to setup a MULTI STATEMENT SQL call.  Most single-statement commands just use the constructor or the SQL property.
            </summary>
        </member>
        <member name="M:BT.Core.ADO.ADOCommand.AddIdTableParameter``1(BT.Core.ADO.IADO,System.String,System.Data.SqlDbType,System.Collections.Generic.List{``0})">
            <summary>
            This will (a) create an input type of INLIST_fieldType which is a table with a single field: ID.
            <para>Usage:  SELECT * FROM xyz WHERE SID IN (SELECT ID FROM @values)</para>
            <para>@values = list of STRING parameter</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="TenantAdo">The system will verify that the ADO connection you specify has been setup to allow table parameters.</param>
            <param name="parameterName">This function create a temp TABLE variable, and the parameterName parameter will dictate that variable's name (eg - "@values" in the example).</param>
            <param name="dbType">BigTime can guess the SQL type required, but you should supply it if your values and your dbType don't match (eg - string vs integer)</param>
            <param name="valuesList">Items to be added to your table parameter (eg - a list of values).</param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOCommand.VerifyParams">
            <summary>
            Because the native SQLCommand object is terrible at returning meaningful error messages, we validate parameters using this function so that we can throw a useful error rback to the calling program if parameters aren't valid.
            <para>We also use this method to replace Nothing with DBNull.value, to convert EAS.EAGen.EADate values to actual dates and to apply some other standard data logic to all parameters.</para>
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.ADO.ADOCreate">
            <summary>
            This is the creation factory for all of our ADO objects.  Use the appropriate create function to return a new ado connection.
            </summary>
            <remarks>For the majority of our BigTime functionality, you'll use a tenant-specific ado object (so that tenant filters are applied automatically).
            <para>To connect to the BigTime authorization repository, use a master ADO object, and to create a standard database connection that allows you to use all of our built in ado methods, just use a connectionString based ado object.  For more details about the functionality provided by these ADO objects, take a look at the IADO interface.</para>
            </remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOCreate.ByTenant(BT.Core.BTGlobals.IGlobals)">
            <summary>
            If you have an existing BTGlobals object, then you can use the RepoSource variables to create a tenant-specific ADO object.
            This provides a few additional functions that standard ADO objects do not (eg - access to binary fields/etc)
            </summary>
            <param name="Globals">The BTGlobals object that is attached to this tenant instance.</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.ADO.ADOCreate.ByRepoSource(BT.Core.ADO.IRepoSourceVars)">
            <summary>
            If you have an existing BTGlobals object, then you can use the RepoSource variables to create a tenant-specific ADO object.
            This provides a few additional functions that standard ADO objects do not (eg - access to binary fields/etc)
            </summary>
            <param name="RepoSource">The tenant's RepoSource (VarsList from BTGlobals)</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.ADO.ADOCreate.ByConnectString(System.String,System.Int64,System.String)">
            <summary>
            This constructor can be used to take advantage of the DB access functionality encapsulated in IADO without relying on the connection string(s) stored in BigTime's configuration or registry settings.
            If you plan to use this constructor, then you will need to provide a complete SQL connection string.
            </summary>
            <param name="ConnectString">e.g. - "Server=EASVR\DB";Database=BIGTIME;User ID=sa;Pwd=pass12!"</param>
            <param name="Timeout">60 seconds by default, but you may want to increase that timeout setting if you are going to attempt SQL functions that require more time (eg. - backups)</param>
            <param name="DefaultDateFormat">The default string format for a date is "MM/dd/yyyy,"  but that format may not work if you are using non-US regional settings.  Take a look at the current Thread's regional settings to verify that this format will work.</param>
        </member>
        <member name="M:BT.Core.ADO.ADOCreate.RepoSourceByConnectString(System.String)">
            <summary>
            Reposource (instead of IADO) for the wrapper ADO functionality provided by Globals but for non-multitenant databases.
            </summary>
            <param name="ConnectString">e.g. - "Server=EASVR\DB";Database=BIGTIME;User ID=sa;Pwd=pass12!"</param>
        </member>
        <member name="M:BT.Core.ADO.ADOCreate.RepoSourceByRegistry(System.String)">
            <summary>
            Reposource (instead of IADO) for the wrapper ADO functionality provided by Globals but for non-multitenant databases.
            </summary>
            <param name="RegistryDirectory">The sub-key in HKLM\EdisonsAttic where this repo source is registered.</param>
        </member>
        <member name="M:BT.Core.ADO.ADOCreate.EmptyConnection">
            <summary>
            If you use this constructor, you MUST set the VarsList property (with a valid IRepoSourceVars object) before you call any of the datbase functions.
            </summary>
        </member>
        <member name="M:BT.Core.ADO.ADOCreate.RegisteredDb">
            <summary>
            To return the default database for the current system (eg - based on the db settings in the system registry), then use this constructor.  Typically, this will return a connection to the btmaster (not to any tenant-specific db).
            </summary>
            <remarks>DB connection information is typically stored in HKEY_LOCAL_MACHINE//Software//EdisonsAttic//DB</remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOCreate.RegisteredDbForMigration">
            <summary>
            This method is specific to our db script migration tool, which uses different credentials to access the SqlServer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.#ctor">
            <summary>
            If you use this constructor, you MUST set the VarsList property (with a valid IRepoSourceVars object) before you call any of the datbase functions.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.#ctor(System.String,System.Boolean,System.Int64,System.String)">
            <summary>
            This constructor can be used to take advantage of the DB access functionality encapsulated in this object without relying on the connection string(s) stored in BigTime's configuration or registry settings.
            If you plan to use this constructor, then you will need to provide a complete SQL connection string.
            </summary>
            <param name="p_sConnectStr">e.g. - "Server=EASVR\DB";Database=BIGTIME;User ID=sa;Pwd=pass12!"</param>
            <param name="p_nTimeout">60 seconds by default, but you may want to increase that timeout setting if you are going to attempt SQL functions that require more time (eg. - backups)</param>
            <param name="p_sDtFormat">The default string format for a date is "MM/dd/yyyy,"  but that format may not work if you are using non-US regional settings.  Take a look at the current Thread's regional settings to verify that this format will work.</param>
            <param name="p_bDoNotSetContext">TRUE if the ADO object should skip calling sp__setContext for every db-access call.</param>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.ADO.ADOBase.DataSet">
            <summary>
            This value is populated when you call the DataTable_SetSQL method.  Take a look at that method for details on how t use this property.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.ADO.ADOBase.ErrorList">
            <summary>
            If the most recent DB function fails, it does not typically return an error.  Errors are stored in this ErrorList property instead (so that the calling function can fail gracefully or deal with errors inline)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.ADO.ADOBase.RecordLimit">
            <summary>
            If you set this value to a non-zero number, then any recordset data returned by this object will be limited to the number of rows you specify.
            <para>If, for example, the query you are running returns 100000 rows, but RecordLimit is set to 100, then the server will return only 100 rows.  Typically, this property is used to "preview" results.</para>
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnValue_inner(BT.Core.ADO.ADOCommand,System.Boolean)">
            <summary>
            Pass a SQL string that returns a value and the results will be returned
            </summary>
            <param name="p_Cmd">An ADO.Cmd structure with a valid SQL statement and a set of PARAMETERS to be merged into that statement.</param>
            <param name="p_bTrapDeadlocks">Calls ExecuteNoDeadlock to auto-retry any failed SQL statement that fails as a result of deadlocks.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ExecuteSQL(System.String)">
            <summary>
            Executes a SQL query that doesn't return data and returns TRUE if the statement is successful.
            </summary>
            <param name="p_sSQL">SQL Statement to execute.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ExecuteSQL(BT.Core.ADO.ADOCommand)">
            <summary>
            Executes a SQL query that doesn't return data and returns TRUE if the statement is successful.
            </summary>
            <param name="p_Cmd">An ADO.Cmd structure with a valid SQL statement and a set of PARAMETERS to be merged into that statement.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ExecuteSQLList(System.Collections.Generic.List{BT.Core.ADO.ADOCommand},System.Boolean,System.Boolean)">
            <summary>
            <para>Runs a set of SQL statements (separated by CRLF).  Can run a set of statements as a transaction, and can run them one at a time and skip errors.
            If a line starts with @, then the function is smart enough to know that we are setting a variable value.  That variable is then available in the
            subsequent line, so we can update text files, for example, using a syntax like this:</para>
            <code lang="vbnet" title="VB.Net">
            @Bytes="long text value...."
            UPDATE tblTable SET TextField=@Bytes
            </code>
            </summary>
            <param name="cSQLList">SQL Statement list (as ADO Command objects).</param>
            <param name="p_bIsTransaction">TRUE if this should be run as a transaction</param>
            <param name="p_bContinueExecute">TRUE if each statement should be run without cancelling on error (errors will still be stored in the object's ErrorList property).</param>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ExecuteSQLList(System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>Runs a set of SQL statements (separated by CRLF).  Can run a set of statements as a transaction, and can run them one at a time and skip errors.
            If a line starts with @, then the function is smart enough to know that we are setting a variable value.  That variable is then available in the
            subsequent line, so we can update text files, for example, using a syntax like this:</para>
            <code lang="vbnet" title="VB.Net">
            @Bytes="long text value...."
            UPDATE tblTable SET TextField=@Bytes
            </code>
            </summary>
            <param name="p_SQLList">SQL Statement list (separated by CRLF).  Note that you can embed ##CRLF## in your SQL statements and this function will read it as a 'newline' when it executes the statement.</param>
            <param name="p_bIsTransaction">TRUE if this should be run as a transaction</param>
            <param name="p_bContinueExecute">TRUE if each statement should be run without cancelling on error (errors will still be stored in the object's ErrorList property).</param>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ExecuteCommandWithoutDeadlock(System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            Catches a 1205 (deadlock) error and throws all others.  Note that we only retry 3 times before throwing the 1205 back to the calling program
            </summary>
            <param name="p_cmd"></param>
            <param name="p_bIsTxn"></param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ExecuteScalarNoDeadlock(System.Data.SqlClient.SqlCommand)">
            <summary>
            Catches a 1205 (deadlock) error and throws all others.  Note that we only retry 3 times before throwing the 1205 back to the calling program
            </summary>
            <param name="p_cmd"></param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnXml(System.String,System.String)">
            <summary>
            Accepts an SQL statement and a main "node" name and returns an XML element that contains one element per row and one sub-element per field.  Note that XML is case sensitive, so you should format your SQL statement carefully.
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_sMainNodeNm">The system will return a node called "Result" if you don't specify another name in this parameter.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnArray(System.String,BT.Core.ADO.ListResult@,System.Boolean,BT.Core.Logger.ILogger,System.Boolean)">
            <summary>
            Accepts a SQL statement and returns a ListResult object (with arrays for data and for the field list)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_Result">An instance of ADOBase.JSonResult.</param>
            <param name="ArithAbortOn">Set to true to run SET ARITHABORT/ANSI_WARNINGS ON before the command</param>
            <param name="Logger"></param>
            <param name="ExtendTimeout"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnArray(BT.Core.ADO.ADOCommand,BT.Core.ADO.ListResult@)">
            <summary>
            Accepts a SQL statement and returns a ListResult object (with arrays for data and for the field list)
            </summary>
            <param name="p_Cmd">SQL command object used to be used to pull dataset</param>
            <param name="p_Result">An instance of ADOBase.JSonResult.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnSingleRowResult(System.Collections.Generic.List{BT.Core.ADO.ADOCommand},BT.Core.ADO.ListResult@)">
            <summary>
            Accepts a set of SQL statements and returns a single row ListResult object (that combines all those values into a single row)
            </summary>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnArray(System.String,System.Collections.ArrayList@)">
            <summary>
            Accepts a SQL statement and returns an ArrayList of values (1 element per row, and one sub-element per field)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_Array"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnArray(System.String,System.Collections.SortedList@)">
            <summary>
            Accepts a SQL statement and returns a SortedList of values (1 element per row, and one sub-element per field)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The sorted list that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnArray_Blank(System.String,System.Collections.SortedList@)">
            <summary>
            Accepts a SQL statement and returns a SortedList of BLANK values based on the fields that would be pulled from the SQL statement (no data is retrieved)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The SortedList which should be populated</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnArray(System.String,System.Collections.Hashtable@)">
            <summary>
            Accepts a SQL statement and returns a Hashtable of values (1 element per row, and one sub-element per field)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The Hashtable that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnArray(System.String,BT.Core.EAS.Hashlist@)">
            <summary>
            Accepts a SQL statement and returns an EAS.Hashlist of values (1 element per row, and one sub-element per field)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The Hashlist that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnArray(System.String,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            Accepts a SQL statement and returns an NameValueCollection (1 element per row, and one value).  Note that the SQL statement will need to pull data as "name" in the first column and "value" in the second.
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The Hashlist that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.ReturnDate(System.String)">
            <summary>
            When we pull a date string from SQL (or from the user), we can use this function to convert it to a valid
            date string based on the server's regional settings.
            </summary>
            <param name="p_sVal">Accepts any regionally date string format(2009-12-31; 2009-31-12; 20091231; etc.)</param>
            <returns>Returns a string formatted according to the system's default date string format (vars("DTFORMAT_4"))</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.Dispose">
            <summary>
            You MUST call dispose each time you create an instance of this object, or the system may leak memory by leaving
            module-level variables unclosed
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.RunSQLFile(System.String)">
            <summary>
            Accepts the name of a file containing SQL commands and runs each of the commands in the file.
            We use this function to run SQL update files when we update BigTime, so the system ignores CREATE TABLE errors
            It can also merge values (e.g. - vocab) if the file contains the merge syntax &lt;#SQLFILE_VOCAB=XX&gt;
            </summary>
            <param name="p_sFileNm">Full path name of the SQL file to execute</param>
            <returns>TRUE if the commands are all run successfully</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.SaveTextField(BT.Core.ADO.ADOCommand,System.String)">
            <summary>
            Used to save a long text file into a BigTime text field
            </summary>
            <param name="SQLUpdate">SQL update statement with an @bytes parameter (e.g. - UPDATE tblX SET Fld=@bytes WHERE ID=SID)</param>
            <param name="p_sVal">text value to load into the database</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.SaveImgField(BT.Core.ADO.ADOCommand,System.Byte[])">
            <summary>
            Used to save a binary string (or a file) into a BigTime varbinary field
            </summary>
            <param name="SQLUpdate">SQL update statement with an @bytes parameter (e.g. - UPDATE tblX SET Fld=@bytes WHERE ID=SID)</param>
            <param name="p_aVal">a byte array value to load into the database</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.GetBinaryField(BT.Core.ADO.ADOCommand)">
            <summary>
            Returns a Byte array from a varbinary field
            </summary>
            <param name="SQLCommand">SQL command which returns one field/record:  a varbinary field of data</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADOBase.GetBinaryField(BT.Core.ADO.ADOCommand,System.String)">
            <summary>
            Takes the data stored in a binary field and saves it to a specified file on disk
            </summary>
            <param name="SQLCommand">SQL command which returns one field/record:  a varbinary field of data</param>
            <param name="p_sFileNm">Full path of the field to be created.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.ADO.IADOTenant.StopWatch">
            <summary>
            This is used internally to track/log ADO result speed 
            </summary>
        </member>
        <member name="P:BT.Core.ADO.IADOTenant.TenantId">
            <summary>
            The TenantId of the firm to which this ado connection is attached.
            </summary>
        </member>
        <member name="P:BT.Core.ADO.IADOTenant.Timeout">
            <summary>
            Number of milliseconds that the connection should wait before throwing a timeout error.
            </summary>
        </member>
        <member name="P:BT.Core.ADO.IADOTenant.GetModelError">
            <summary>
            Examines the ADO native errors associated with a SQL call and returns a bigtime-useable error string. 
            We use this to detect things like "duplicate" errors that are not caught in the business layer.
            </summary>
        </member>
        <member name="P:BT.Core.ADO.IADOTenant.RecordLimit">
            <summary>
            If the next SQL statement(s) to be executed should be limited to a specific number of rows (eg - first 1000) 
            </summary>
        </member>
        <member name="M:BT.Core.ADO.IADOTenant.BulkCopy(System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Exposes a tenant-safe version of BulkCopy from the SQL instance.
            </summary>
        </member>
        <member name="M:BT.Core.ADO.IADOTenant.ReturnSingleRowResult(System.Collections.Generic.List{BT.Core.ADO.ADOCommand},BT.Core.ADO.ListResult@)">
            <summary>
            Accepts a set of SQL statements and returns a single row ListResult object (that combines all those values into a single row)
            </summary>
        </member>
        <member name="M:BT.Core.ADO.IADOTenant.RunSQLFile(System.String)">
            <summary>
            Accepts the name of a file containing SQL commands and runs each of the commands in the file.
            </summary>
            <param name="p_sFileNm">Full path name of the SQL file to execute</param>
            <returns>TRUE if the commands are all run successfully</returns>
            <remarks>
            <para>We use this function to run SQL update files when we update BigTime, so the system ignores CREATE TABLE errors.</para>
            <para>It can also merge values (e.g. - vocab) if the file contains the merge syntax &lt;#SQLFILE_VOCAB=XX&gt;</para>
            </remarks>
        </member>
        <member name="M:BT.Core.ADO.IADOTenant.ClearPool">
            <summary>
            Clears the connection pool for the current connection (run periodically to prevent connections from seeing the TenantId from prior connections).
            </summary>
        </member>
        <member name="M:BT.Core.ADO.SelectListItem.FromEnumVal(System.Enum)">
            <summary>
            Helper method that will create a simple select list item with the INT value of the enum as the CODE,
            and the DESCRIPTION attribute of the enum as the LISTVAL if it has been set.  If it hasn't it will be the
            string value of the enum.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.ADO.ADORegistry.#ctor">
            <summary>
            Initialize the object using the default registry location.
            </summary>
        </member>
        <member name="M:BT.Core.ADO.ADORegistry.#ctor(System.String)">
            <summary>
            Initialize the object using a specific sub-key in the registry.
            </summary>
            <param name="p_sRegDir">The sub-directory name (e.g. - "Software\Edison's Attic\IEG").</param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADORegistry.ADOReturnValue(System.String)">
            <summary>
            Returns a simple SQL value
            </summary>
            <param name="p_sSQL">SQL SELECT statement that should return a single value</param>
        </member>
        <member name="M:BT.Core.ADO.ADORegistry.ADOReturnRow(System.String)">
            <summary>
            Returns a datarow from a simple SQL statement (note that only the FIRST datarow from the SQL query is returned)
            </summary>
            <param name="p_sSQL">SQL SELECT statement that should return a single value</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.ADO.ADORegistry.RegDir">
            <summary>
            Returns the current registry "base" directory.  Note that this value is set when you INITIALIZE this object.
            </summary>
        </member>
        <member name="P:BT.Core.ADO.ADORegistry.RegDirSiteNm">
            <summary>
            Returns the current registry "SITE" name (for multi-site installations).
            </summary>
        </member>
        <member name="M:BT.Core.ADO.ADORegistry.RegDirCheck(System.String)">
            <summary>
            Called internally to verify that the string passed to the NEW function is a valid registry section
            </summary>
            <param name="p_sRegDir"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.ADORegistry.get_RegVal(System.String,System.String)">
            <summary>
            "Registry" values can be stored in the HKEY_LOCAL_MACHINE, in web.config, or in a custom CONFIG file created by BigTime.  The program doesn't need to know how the machine is setup, it can simply use this function to retrieve "registry" values.
            </summary>
            <param name="p_sKey">Registry "key"</param>
            <param name="p_sVal">Value to query/set</param>
            <value>If we are setting a registry value, pass the value to save to the registry in this parameter</value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.ADO.IADO">
            <summary>
            Used to run SQL statements against the system database without requiring
            complex declarations/etc.
            <para>SYNTAX:  Dim cADO as New ADOBase (g_cEAGlobals)</para>
            <para>         sVal - cADO.ReturnValue("SELECT Val FROM..")</para>
            <para>         cADO.Dispose()</para>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.ADO.IADO.IsEmpty">
            <summary>
            True if the most recent operation returned no rows
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.ADO.IADO.VarsList">
            <summary>
            Set in the New() method
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.ADO.IADO.ErrorList">
            <summary>
            If a SQL statement fails, the function typically returns false, and specific errors are stored in the ErrorList collection.
            This collection is reset each time a new SQL function is called.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.DataTable_SetSQL(System.String,System.String,System.Boolean)">
            <summary>
            <para>Allows you to set the object's DataSource values based on the SQL you provide.</para>
            <para>Dim cADO = new ADOBase()</para>
            <para>cADO.EALogin = m_cLoginData</para>
            <para>if cADO.DataTable_SetSQL("SELECT * FROM …") andAlso not cADO.IsEmpty then</para>
            <para>   set MyDataTable = cADO.DataSet.Tables(0)</para>
            <para>else</para>
            <para>   sError = cADO.ErrorList(0)</para>
            <para>end if</para>
            </summary>
            <param name="p_sSQL">SQL to be used to pull dataset</param>
            <param name="p_sTableNm">Name of the table in the Dataset (otherwise, the current DS will be replaced).</param>
            <param name="p_bUseNativeDataTypes">TRUE to return SQLdata types instead of c# types</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.DataTable_SetSQL(BT.Core.ADO.ADOCommand,System.String,System.Boolean)">
            <summary>
            <para>Allows you to set the object's DataSource values based on the SQL you provide.</para>
            </summary>
            <param name="p_Cmd">SQL ADOCommand to be used to pull dataset</param>
            <param name="p_sTableNm">Name of the table in the Dataset (otherwise, the current DS will be replaced).</param>
            <param name="p_bUseNativeDataTypes">TRUE to return SQLdata types instead of c# types</param>
        </member>
        <member name="M:BT.Core.ADO.IADO.InsertWithSID(System.String)">
            <summary>
            Pass an SQL INSERT statement to this function and it will return the IDENTITY() value that was pulled from SQL Server.
            </summary>
            <param name="p_sSQL">SQL INSERT Statement</param>
            <returns>Returns the unique SID value given to the new record by the SQL database</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.InsertWithSID(BT.Core.ADO.ADOCommand)">
            <summary>
            Pass an SQL INSERT statement to this function and it will return the IDENTITY() value that was pulled from SQL Server.
            </summary>
            <param name="p_cmd">SQL INSERT Command</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnValue(System.String)">
            <summary>
            Pass a SQL string that returns a value and the results will be returned
            </summary>
            <param name="p_sSQL">SQL SELECT Statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnValue(BT.Core.ADO.ADOCommand)">
            <summary>
            Pass a SQL command that returns a value and the results will be returned (as a raw string)
            </summary>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnValue``1(BT.Core.ADO.ADOCommand,``0)">
            <summary>
            Pass a SQL command that returns a value and the results will be returned (converted to the generic type specified).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Command">SQL Command(s) to execute</param>
            <param name="DefaultValue">If the command(s) return a null value or a value that cannot be converted to the TYPE specified, then the DEFAULT value will be returned instead.</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.ADO.IADO.ExecuteSQL(System.String)">
            <summary>
            Executes a SQL query that doesn't return data and returns TRUE if the statement is successful.
            </summary>
            <param name="p_sSQL">SQL Statement to execute.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ExecuteSQL(BT.Core.ADO.ADOCommand)">
            <summary>
            Executes a SQL query that doesn't return data and returns TRUE if the statement is successful.
            </summary>
        </member>
        <member name="M:BT.Core.ADO.IADO.ExecuteSQLList(System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>Runs a set of SQL statements (separated by CRLF).  Can run a set of statements as a transaction, and can run them one at a time and skip errors.
            If a line starts with @, then the function is smart enough to know that we are setting a variable value.  That variable is then available in the
            subsequent line, so we can update text files, for example, using a syntax like this:</para>
            <code>
            @Bytes="long text value...."
            UPDATE tblTable SET TextField=@Bytes
            </code>
            </summary>
            <param name="p_SQLList">SQL Statement list (separated by CRLF).  Note that you can embed ##CRLF## in your SQL statements and this function will read it as a 'newline' when it executes the statement.</param>
            <param name="p_bIsTransaction">TRUE if this should be run as a transaction</param>
            <param name="p_bContinueExecute">TRUE if each statement should be run without cancelling on error (errors will still be stored in the object's ErrorList property).</param>
        </member>
        <member name="M:BT.Core.ADO.IADO.ExecuteSQLList(System.Collections.Generic.List{BT.Core.ADO.ADOCommand},System.Boolean,System.Boolean)">
            <summary>
            <para>Runs a set of SQL commands.  Can run a set of statements as a transaction, and can run them one at a time and skip errors.</para>
            </summary>
            <param name="cSQLList">SQL Statement list.</param>
            <param name="p_bIsTransaction">TRUE if this should be run as a transaction</param>
            <param name="p_bContinueExecute">TRUE if each statement should be run without cancelling on error (errors will still be stored in the object's ErrorList property).</param>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnXml(System.String,System.String)">
            <summary>
            Accepts an SQL statement and a main "node" name and returns an XML element that contains one element per row and one sub-element per field.  Note that XML is case sensitive, so you should format your SQL statement carefully.
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_sMainNodeNm">The system will return a node called "Result" if you don't specify another name in this parameter.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnArray(System.String,System.Collections.ArrayList@)">
            <summary>
            Accepts a SQL statement and returns an ArrayList of values (1 element per row, and one sub-element per field)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_Array"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnArray(System.String,BT.Core.ADO.ListResult@,System.Boolean,BT.Core.Logger.ILogger,System.Boolean)">
            <summary>
            Accepts a SQL statement and returns a ListResult object (with arrays for data and for the field list)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_Result">An instance of ADOBase.JSonResult.</param>
            <param name="ArithAbortOn">Set to true to run SET ARITHABORT ON before the command</param>
            <param name="Logger"></param>
            <param name="ExtendTimeout"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnArray(System.String,System.Collections.SortedList@)">
            <summary>
            Accepts a SQL statement and returns a SortedList of values (1 element per row, and one sub-element per field)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The sorted list that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnArray(System.String,System.Collections.Hashtable@)">
            <summary>
            Accepts a SQL statement and returns a Hashtable of values (1 element per row, and one sub-element per field)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The Hashtable that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnArray(System.String,BT.Core.EAS.Hashlist@)">
            <summary>
            Accepts a SQL statement and returns an EAS.Hashlist of values (1 element per row, and one sub-element per field)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The Hashlist that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnArray(System.String,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            Accepts a SQL statement and returns an NameValueCollection (1 element per row, and one value).  Note that the SQL statement will need to pull data as "name" in the first column and "value" in the second.
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The Hashlist that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnArray_Blank(System.String,System.Collections.SortedList@)">
            <summary>
            Accepts a SQL statement and returns a SortedList of BLANK values based on the fields that would be pulled from the SQL statement (no data is retrieved)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The sorted list that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnArray_Blank(System.String,System.Collections.Hashtable@)">
            <summary>
            Accepts a SQL statement and returns a Hashtable of BLANK values based on the fields that would be pulled from the SQL statement (no data is retrieved)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The Hashtable that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnArray_Blank(System.String,BT.Core.EAS.Hashlist@)">
            <summary>
            Accepts a SQL statement and returns an EAS.Hashlist of BLANK values based on the fields that would be pulled from the SQL statement (no data is retrieved)
            </summary>
            <param name="p_sSQL"></param>
            <param name="p_List">The Hashlist that should be populated by the SQL statement</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnDictionary``2(BT.Core.ADO.ADOCommand)">
            <summary>
            Accepts a SQL command and returns a dictionary based on the FIRST 2 COLUMNS of the result set.  Any additional columns will be ignored.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnDictionary``1(BT.Core.ADO.ADOCommand)">
            <summary>
            Accepts a SQL command and returns a dictionary.  The FIRST column becomes the dictionary KEY, and the dictionary ITEM is a &lt;string,object&gt; dictionary of the fields in your query.
            </summary>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnList``1(BT.Core.ADO.ADOCommand)">
            <summary>
            Accepts a SQL command and returns a LIST (of a given type) based on the FIRST COLUMN of the result set.  Any additional columns will be ignored.
            </summary>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnSelectList(BT.Core.ADO.ADOCommand)">
            <summary>
            Accepts a SQL command and returns a SELECT LIST result set.  The  query is expecting OBJSID,OBJNM,OBJINFO,OBJINFO2,FILTERSID,IsInactive,GRP1,GRP2,GRP3 (or any combination of those fields).
            </summary>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnSelectList(System.String)">
            <summary>
            Accepts a SQL SELECT string (command) and returns a SELECT LIST result set.  The  query is expecting OBJSID,OBJNM,OBJINFO,OBJINFO2,FILTERSID,IsInactive,GRP1,GRP2,GRP3 (or any combination of those fields).
            </summary>
        </member>
        <member name="M:BT.Core.ADO.IADO.ReturnDate(System.String)">
            <summary>
            When we pull a date string from SQL (or from the user), we can use this function to convert it to a valid
            date string based on the server's regional settings.
            </summary>
            <param name="p_sVal">Accepts any regionally date string format(2009-12-31; 2009-31-12; 20091231; etc.)</param>
            <returns>Returns a string formatted according to the system's default date string format (vars("DTFORMAT_4"))</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.ADO.IADO.SaveTextField(BT.Core.ADO.ADOCommand,System.String)">
            <summary>
            Used to save a long text file into a BigTime text field
            </summary>
            <param name="SQLUpdate">SQL update statement with an @bytes parameter (e.g. - UPDATE tblX SET Fld=@bytes WHERE ID=SID)</param>
            <param name="p_sVal">text value to load into the database</param>
        </member>
        <member name="M:BT.Core.ADO.IADO.SaveImgField(BT.Core.ADO.ADOCommand,System.Byte[])">
            <summary>
            Used to save a binary string (or a file) into a BigTime varbinary field
            </summary>
            <param name="SQLCommand">SQL update statement with an @bytes parameter (e.g. - UPDATE tblX SET Fld=@bytes WHERE ID=SID)</param>
            <param name="p_aVal">a byte array value to load into the database</param>
        </member>
        <member name="M:BT.Core.ADO.IADO.GetBinaryField(BT.Core.ADO.ADOCommand)">
            <summary>
            Returns a Byte array from a varbinary field
            </summary>
            <param name="SQLCommand">SQL string which returns one field/record:  a varbinary field of data</param>
        </member>
        <member name="M:BT.Core.ADO.IADO.GetBinaryField(BT.Core.ADO.ADOCommand,System.String)">
            <summary>
            Takes the data stored in a binary field and saves it to a specified file on disk
            </summary>
            <param name="SQLCommand">SQL string which returns one field/record:  a varbinary field of data</param>
            <param name="p_sFileNm">Full path of the field to be created.</param>
        </member>
        <member name="M:BT.Core.ADO.IADO.Dispose">
            <summary>
            You MUST call dispose each time you create an instance of this object, or the system may leak memory by leaving
            module-level variables unclosed
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.Crypt.LegacyCipherBase">
            <summary>
            Base class for adapting existing BT cipher algorithms for use in Cipher.Encrypt and Cipher.Decrypt methods.
            Rather than attempting to fit legacy ciphers into Microsoft's SymmetricAlgorithm, it's handled as a special case in Cipher class.
            For legacy ciphers, Cipher.Encrypt and Cipher.Decrypt call the abstract EncryptToStream and DecryptFromStream methods defined here.
            </summary>
        </member>
        <member name="M:BT.Core.Crypt.LegacyCipherBase.EncryptToStream(System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Reads data from InputStream, encrypts it using the Password, then writes results to OutputStream.
            </summary>
            <param name="Password">
            The phrase used to encrypt (and decrypt) the stream.  Also known as "Key".  Though technically the Key
              is a byte[] representation of the Password produced by a KeyDerivation algorithm. 
            </param>
            <param name="InputStream">A stream of unencrypted bytes.</param>
            <param name="OutputStream">A stream where the corresponding encrypted bytes will be written.</param>
        </member>
        <member name="M:BT.Core.Crypt.LegacyCipherBase.DecryptFromStream(System.String,System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Reads data from InputStream, decrypts it using the Password, then writes results to OutputStream.
            </summary>
            <param name="Password">
            The phrase used to decrypt (and encrypt) the stream.  Also known as "Key".  Though technically the Key
              is a byte[] representation of the Password produced by a KeyDerivation algorithm. 
            </param>
            <param name="InputStream">A stream of encrypted bytes.</param>
            <param name="OutputStream">A stream where the corresponding decrypted bytes will be written.</param>
            <param name="InputIncludedHeader">
            Indicates if InputStream contained a valid header.
            If so, the stream was written by the future-proof Cipher API. If not, the stream was written by a legacy cipher API.
            The value of this parameter affects how the subsequent bytes in the stream are interpreted (as UTF-8, Base64, Hex, etc).
            </param>
        </member>
        <member name="T:BT.Core.Crypt.Cipher">
            <summary>
            This class provides an asynchronous and synchronous encryption API.
            Typical encryption usage is var cipherText = Cipher.EncryptText(password, plainText) or Cipher.EncryptText(password, plainText, CipherName.AesCsp);
            Typical decryption usage is var decryptedText = Cipher.DecryptText(password, cipherText);
            The password sometimes is known as the "key" and may be found in a BTGlobals variable.
            </summary>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptTextAsync(System.String,System.String,BT.Core.Crypt.CipherName)">
            <summary>
            Encrypt text asynchronously and return a Base64 representation of the encrypted bytes.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the plaintext.</param>
            <param name="Input">The unencrypted plaintext.</param>
            <param name="CipherName">Optional parameter indicating the encryption algorithm (with its default settings).</param>
            <returns>The Base64 representation of the encrypted bytes.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptText(System.String,System.String,BT.Core.Crypt.CipherName)">
            <summary>
            Encrypt text and return a Base64 representation of the encrypted bytes.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the plaintext.</param>
            <param name="Input">The unencrypted plaintext.</param>
            <param name="CipherName">Optional parameter indicating the encryption algorithm (with its default settings).</param>
            <returns>The Base64 representation of the encrypted bytes.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptTextAsync(System.String,System.String,BT.Core.Crypt.EncryptionHeader)">
            <summary>
            Advanced: Encrypt text asynchronously and return a Base64 representation of the encrypted bytes.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the plaintext.</param>
            <param name="Input">The unencrypted plaintext.</param>
            <param name="Header">Advanced settings specifying key derivation and cipher algorithms.</param>
            <returns>The Base64 representation of the encrypted bytes.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptText(System.String,System.String,BT.Core.Crypt.EncryptionHeader)">
            <summary>
            Advanced: Encrypt text and return a Base64 representation of the encrypted bytes.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the plaintext.</param>
            <param name="Input">The unencrypted plaintext.</param>
            <param name="Header">Advanced settings specifying key derivation and cipher algorithms.</param>
            <returns>The Base64 representation of the encrypted bytes.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptBytesAsync(System.String,System.Byte[],BT.Core.Crypt.CipherName)">
            <summary>
            Encrypt bytes asynchronously and return an array of the encrypted bytes.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the input bytes.</param>
            <param name="Input">The unencrypted byte array.</param>
            <param name="CipherName">Optional parameter indicating the encryption algorithm (with its default settings).</param>
            <returns>An array of the encrypted bytes.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptBytes(System.String,System.Byte[],BT.Core.Crypt.CipherName)">
            <summary>
            Encrypt bytes and return an array of the encrypted bytes.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the input bytes.</param>
            <param name="Input">The unencrypted byte array.</param>
            <param name="CipherName">Optional parameter indicating the encryption algorithm (with its default settings).</param>
            <returns>An array of the encrypted bytes.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptBytesAsync(System.String,System.Byte[],BT.Core.Crypt.EncryptionHeader)">
            <summary>
            Advanced: Encrypt bytes asynchronously and return an array of the encrypted bytes.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the input bytes.</param>
            <param name="Input">The unencrypted byte array.</param>
            <param name="Header">Advanced settings specifying key derivation and cipher algorithms.</param>
            <returns>An array of the encrypted bytes.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptBytes(System.String,System.Byte[],BT.Core.Crypt.EncryptionHeader)">
            <summary>
            Advanced: Encrypt bytes and return an array of the encrypted bytes.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the input bytes.</param>
            <param name="Input">The unencrypted byte array.</param>
            <param name="Header">Advanced settings specifying key derivation and cipher algorithms.</param>
            <returns>An array of the encrypted bytes.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptToStreamAsync(System.String,System.IO.Stream,System.IO.Stream,BT.Core.Crypt.CipherName)">
            <summary>
            Encrypt the contents of an input stream asynchronously and write encrypted contents into a separate output stream.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt contents.</param>
            <param name="InputStream">A stream where the unencrypted contents will be read.</param>
            <param name="OutputStream">A stream where the encrypted contents will be written.</param>
            <param name="CipherName">Optional parameter indicating the encryption algorithm (with its default settings).</param>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptToStream(System.String,System.IO.Stream,System.IO.Stream,BT.Core.Crypt.CipherName)">
            <summary>
            Encrypt the contents of an input stream and write encrypted contents into a separate output stream.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt contents.</param>
            <param name="InputStream">A stream where the unencrypted contents will be read.</param>
            <param name="OutputStream">A stream where the encrypted contents will be written.</param>
            <param name="CipherName">Optional parameter indicating the encryption algorithm (with its default settings).</param>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptToStreamAsync(System.String,System.IO.Stream,System.IO.Stream,BT.Core.Crypt.EncryptionHeader)">
            <summary>
            Advanced: Encrypt the contents of an input stream asynchronously and write encrypted contents into a separate output stream.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt contents.</param>
            <param name="InputStream">A stream where the unencrypted contents will be read.</param>
            <param name="OutputStream">A stream where the encrypted contents will be written.</param>
            <param name="Header">Advanced settings specifying key derivation and cipher algorithms.</param>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.EncryptToStream(System.String,System.IO.Stream,System.IO.Stream,BT.Core.Crypt.EncryptionHeader)">
            <summary>
            Advanced: Encrypt the contents of an input stream and write encrypted contents into a separate output stream.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt contents.</param>
            <param name="InputStream">A stream where the unencrypted contents will be read.</param>
            <param name="OutputStream">A stream where the encrypted contents will be written.</param>
            <param name="Header">Advanced settings specifying key derivation and cipher algorithms.</param>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.DecryptTextAsync(System.String,System.String,BT.Core.Crypt.CipherName)">
            <summary>
            Decrypt text asynchronously and return the unecrypted text.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the plaintext.</param>
            <param name="Input">The encrypted ciphertext.</param>
            <param name="FallbackCipherName">
            Optional parameter indicating the decryption algorithm (with its default settings).
            Normally this parameter is not required because the input ciphertext includes an unencrypted header that specifies key derivation and cipher algorithms. 
            </param>
            <returns>The unencrypted text.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.DecryptText(System.String,System.String,BT.Core.Crypt.CipherName)">
            <summary>
            Decrypt text and return the unecrypted text.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the plaintext.</param>
            <param name="Input">The encrypted ciphertext.</param>
            <param name="FallbackCipherName">
            Optional parameter indicating the decryption algorithm (with its default settings).
            Normally this parameter is not required because the input ciphertext includes an unencrypted header that specifies key derivation and cipher algorithms. 
            </param>
            <returns>The unencrypted text.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.DecryptBytesAsync(System.String,System.Byte[],BT.Core.Crypt.CipherName)">
            <summary>
            Decrypt bytes asynchronously and return an array of the unencrypted bytes.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the plaintext.</param>
            <param name="Input">The encrypted byte array.</param>
            <param name="FallbackCipherName">
            Optional parameter indicating the decryption algorithm (with its default settings).
            Normally this parameter is not required because the input ciphertext includes an unencrypted header that specifies key derivation and cipher algorithms. 
            </param>
            <returns>An array of the unencrypted bytes.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.DecryptBytes(System.String,System.Byte[],BT.Core.Crypt.CipherName)">
            <summary>
            Decrypt bytes and return an array of the unencrypted bytes.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt the plaintext.</param>
            <param name="Input">The encrypted byte array.</param>
            <param name="FallbackCipherName">
            Optional parameter indicating the decryption algorithm (with its default settings).
            Normally this parameter is not required because the input ciphertext includes an unencrypted header that specifies key derivation and cipher algorithms. 
            </param>
            <returns>An array of the unencrypted bytes.</returns>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.DecryptFromStreamAsync(System.String,System.IO.Stream,System.IO.Stream,BT.Core.Crypt.CipherName)">
            <summary>
            Decrypt the contents of an input stream asynchronously and write unencrypted contents into a separate output stream.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt contents.</param>
            <param name="InputStream">A stream where the encrypted contents will be read.</param>
            <param name="OutputStream">A stream where the unencrypted contents will be written.</param>
            <param name="FallbackCipherName">
            Optional parameter indicating the decryption algorithm (with its default settings).
            Normally this parameter is not required because the input stream includes an unencrypted header that specifies key derivation and cipher algorithms. 
            </param>
        </member>
        <member name="M:BT.Core.Crypt.Cipher.DecryptFromStream(System.String,System.IO.Stream,System.IO.Stream,BT.Core.Crypt.CipherName)">
            <summary>
            Decrypt the contents of an input stream and write unencrypted contents into a separate output stream.
            </summary>
            <param name="Password">The secret phrase used to encrypt and decrypt contents.</param>
            <param name="InputStream">A stream where the encrypted contents will be read.</param>
            <param name="OutputStream">A stream where the unencrypted contents will be written.</param>
            <param name="FallbackCipherName">
            Optional parameter indicating the decryption algorithm (with its default settings).
            Normally this parameter is not required because the input stream includes an unencrypted header that specifies key derivation and cipher algorithms. 
            </param>
        </member>
        <member name="T:BT.Core.Crypt.CipherName">
            <summary>
            This enum is written to an unencrypted header that appears before the encrypted payload.
            It is represented as a byte to save space in the header.
            Do not remove the byte base type or change or remove existing names or numeric values because that will break decryption.
            It is safe to add names and values.
            </summary>
        </member>
        <member name="T:BT.Core.Crypt.EncryptionHeader">
            <summary>
            Unencrypted header written prior to encrypted payload.  Header ensures encrypted data can be decrypted given the password.
            Do not alter this class.  Doing so will break decryption of data written prior to the change, violating the "future-proof"
              guarantee provided by Cipher.Encrypt and Cipher.Decrypt.
            </summary>
        </member>
        <member name="P:BT.Core.Crypt.EncryptionHeader.Salt">
            <summary>
            For best security, leave null.  A random Salt will be generated in Cipher.Encrypt method.
            This prevents identical plaintexts from producing identical ciphertexts when encrypted using the same key.
            </summary>		
        </member>
        <member name="P:BT.Core.Crypt.EncryptionHeader.InitializationVector">
            <summary>
            For best security, leave null.  A random InitializationVector will be generated in Cipher.Encrypt method.
            This prevents identical plaintexts from producing identical ciphertexts when encrypted using the same key.
            </summary>		
        </member>
        <member name="M:BT.Core.Crypt.EncryptionHeader.WriteToStreamAsync(System.IO.Stream)">
            <summary>
            Asynchronously writes a binary representation of header to OutputStream.  A binary format is much more space efficient than JSON text.
            </summary>
            <param name="OutputStream">A stream where the binary representation will be written.</param>
        </member>
        <member name="M:BT.Core.Crypt.EncryptionHeader.WriteToStream(System.IO.Stream)">
            <summary>
            Writes a binary representation of header to OutputStream.  A binary format is much more space efficient than JSON text.
            </summary>
            <param name="OutputStream">A stream where the binary representation will be written.</param>
        </member>
        <member name="M:BT.Core.Crypt.EncryptionHeader.ReadFromStreamAsync(System.IO.Stream)">
            <summary>
            Asynchronously reads a binary representation of header from OutputStream.  A binary format is much more space efficient than JSON text.
            </summary>
            <param name="InputStream">A stream where the binary representation will be read.</param>
            <returns>A tuple indicating header validity and the contents and length of a partially read buffer.</returns>
        </member>
        <member name="M:BT.Core.Crypt.EncryptionHeader.ReadFromStream(System.IO.Stream)">
            <summary>
            Reads a binary representation of header from OutputStream.  A binary format is much more space efficient than JSON text.
            </summary>
            <param name="InputStream">A stream where the binary representation will be read.</param>
            <returns>A tuple indicating header validity and the contents and length of a partially read buffer.</returns>
        </member>
        <member name="T:BT.Core.Crypt.KeyDerivationName">
            <summary>
            This enum is written to an unencrypted header that appears before the encrypted payload.
            It is represented as a byte to save space in the header.
            Do not remove the byte base type or change or remove existing names or numeric values because that will break decryption.
            It is safe to add names and values.
            </summary>
        </member>
        <member name="T:BT.Core.Crypt.AesManaged">
            <summary>
            Used by the API oAuth system to encrypt API tokens in a standards-compliant format.
            </summary>
        </member>
        <member name="T:BT.Core.Crypt.EACryptDS">
            <summary>
            When we pass datasets between the website and clients (e.g. - outlook web access) that use our web services, we may pass ado datasets.  We use this class to encrypt that data, so that even non SSL installations have some level of protection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.Crypt.Simple">
            <summary>
            The class used to encrypt/decrypt using our internal "simple" algorithm.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.Crypt.Access">
            <summary>
            Contains all of the code we use to encrypt/decrypt strings.  we support 2 types of data encryption:  "simple" and "blowfish"
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.Crypt.Access.SIMPLE_Decrypt(System.String,System.String)">
            <summary>
            Accepts a string and a key and returns an un-encrypted version of that text.  Note that the text is typically HEX encoded to avoid non-ascii characters
            </summary>
            <param name="p_sText">HEX encoded encrptyed text</param>
            <param name="p_sKey">plain text key to decrypt the string</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.Crypt.Access.SIMPLE_Encrypt(System.String,System.String)">
            <summary>
            Accepts a string and a key and returns an encrypted version of that text.  Note that the return value is HEX encoded to avoid non-ascii characters
            </summary>
            <param name="p_sText">plain text string to encrypt</param>
            <param name="p_sKey">KEY to be used to encrypt the text</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.Crypt.Access.BLOWFISH_Decrypt(System.String,System.String)">
            <summary>
            Accepts a string and a key and returns an un-encrypted version of that text.  Note that this function uses the BLOWFISH algorithm.
            </summary>
            <param name="p_sText">HEX encoded encrptyed text</param>
            <param name="p_sKey">plain text key to decrypt the string</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.Crypt.Access.BLOWFISH_Encrypt(System.String,System.String)">
            <summary>
            Accepts a string and a key and returns an encrypted version of that text.  Note that the return value is HEX encoded to avoid non-ascii characters.    Note that this function uses the BLOWFISH algorithm.
            </summary>
            <param name="p_sText">plain text string to encrypt</param>
            <param name="p_sKey">KEY to be used to encrypt the text</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EntityLogger.IEntityLogger.Log(System.Int64,BT.Core.EntityLogger.EEventType,BT.Core.ADO.ADOCommand,System.Int64)">
            <summary>
            Writes a log for the update or delete event.
            </summary>
            <param name="entitySID">The SID of the entity we are logging.</param>
            <param name="eventType">The type of event. 0 = create, 1 = update, 2 = delete</param>
            <param name="entityObject">The ADO command object that captures this entity's values.</param>
            <param name="userID">The UserID, usually taken from the session object.</param>
        </member>
        <member name="T:BT.Core.BTResponse`1">
            <summary>
            A generic response enables branching logic off properties of a strongly-typed message.
            </summary>
        </member>
        <member name="T:BT.Core.BTSimpleResponse">
            <summary>
            Represents a response message as a string, the most common case.
            </summary>
        </member>
        <member name="T:BT.Core.IBTResponse`1">
            <summary>
            A generic response enables branching logic off properties of a strongly-typed message.
            </summary>
        </member>
        <member name="T:BT.Core.IBTSimpleResponse">
            <summary>
            Represents a response message as a string, the most common case.
            </summary>
        </member>
        <member name="M:BT.Core.ActionExtension.RunWithHardTimeout(System.Action,System.TimeSpan)">
            <summary>
            Use this method to call a synchronous third-party API method that
              A) Does not accept and honor a cancellation token.
              B) Is known to block occasionally and never return.
            This method returns true or false.
            This method runs the Action on a dedicated thread wrapped in a try catch.
            <para>It aborts the thread after timeout has elapsed to protect against runaway CPU usage (such as code stuck in an infinite loop).
            Aborting a thread is not ideal.  The ideal solution is to fix the problematic code that occasionally blocks and never returns.
            However, if the problematic code is third-party for which we do not have source, we must result to drastic measures to protect our processes.</para>
            </summary>
            <param name="Action">The delegate to run on a dedicated thread.</param>
            <param name="Timeout">The maximum timespan for which the method is allowed to run before it's aborted.</param>
            <returns>A tuple where Success indicates whether the Func returned in the allotted Timeout (true) or threw an exception or hung (false).</returns>
        </member>
        <member name="M:BT.Core.ActionExtension.RunWithHardTimeout``1(System.Func{``0},System.TimeSpan)">
            <summary>
            Use this method to call a synchronous third-party API method that
              A) Does not accept and honor a cancellation token.
              B) Is known to block occasionally and never return.
            This method either returns T or default(T).
            This method runs the Func on a dedicated thread.
            <para>It aborts the thread after timeout has elapsed to protect against runaway CPU usage (such as code stuck in an infinite loop).
            Aborting a thread is not ideal.  The ideal solution is to fix the problematic code that occasionally blocks and never returns.
            However, if the problematic code is third-party for which we do not have source, we must result to drastic measures to protect our processes.</para>
            </summary>
            <param name="Func">The delegate to run on a dedicated thread.</param>
            <param name="Timeout">The maximum timespan for which the method is allowed to run before it's aborted.</param>
            <returns>A tuple where Result is the value returned by Func and Success indicates whether the Func returned in the allotted Timeout (true) or threw an exception or hung (false).</returns>
        </member>
        <member name="M:BT.Core.Extension.DataTableExtensions.ToCSVByteArray(System.Data.DataTable)">
            <summary>
            This extension creates a CSV byte array from a datatable. It uses the columns as the first line
            then proceeds with each row adding them line by line into a stream. Once that stream is complete it
            writes to a memory stream and produces a byte array, This can be helpful with converting datatables
            straight to csv files.
            </summary>
            <param name="dtDataTable">The correctly formatted DataTable</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.ExceptionExtension.GetSummary(System.Exception,System.Boolean,System.Boolean)">
            <summary>
            This method returns exception details including Type, Message, Stack Trace (optional), and InnerException details (optional).
            </summary>
            <param name="Exception">The object instance for this extension method.</param>
            <param name="IncludeStackTrace">True = Include stack trace with method names, filenames, and line numbers.  This may reveal security-sensitive code and SQL internals.  Not recommended for Production environments.</param>
            <param name="RecurseInnerExceptions">True = Include inner exception, its inner exception, etc.  False = Include only the top-level exception.</param>
            <returns>Text description of the exception and optionally its inner exceptions.</returns>
        </member>
        <member name="M:BT.Core.ExceptionExtension.ToModelErrorDictionary(System.Exception,System.Boolean,System.Boolean,BT.Core.EAS.BTModelErrorDictionary)">
            <summary>
            This method returns exception details including Type, Message, Stack Trace (optional), and InnerException details (optional).
            </summary>
            <param name="Exception">The object instance for this extension method.</param>
            <param name="IncludeStackTrace">True = Include stack trace with method names, filenames, and line numbers.  This may reveal security-sensitive code and SQL internals.  Not recommended for Production environments.</param>
            <param name="RecurseInnerExceptions">True = Include inner exception, its inner exception, etc.  False = Include only the top-level exception.</param>
            <param name="Errors">If a BTModelErrorDictionary instance is passed, errors will be added to it.  If not, a new instance will be created.</param>
            <returns>A BTModelErrorDictionary where each key is exception level ("Level 1" = topmost exception, "Level 2" = first inner exception, etc) and value is a list of exception Type, Message, and (optionally) Stack Trace.</returns>
        </member>
        <member name="M:BT.Core.EnumerableExtension.MinItem``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            This method returns the item in an enumeration with the minimum property value.
            It enumerates items only once.  It does not waste time sorting items.
            </summary>
            <typeparam name="TItem">The type of the items in the enumeration.</typeparam>
            <typeparam name="TProperty">The type of the item property to be examined.</typeparam>
            <param name="Items">The items to enumerate.</param>
            <param name="GetPropertyValue">A function that- given an item, the best item found so far, and the GetPropertyValue function (in that order)-
              returns a boolean indicating if the item is better.
            </param>
            <returns>The best item (according to the GetPropertyValue function) in the enumeration.</returns>
        </member>
        <member name="M:BT.Core.EnumerableExtension.MaxItem``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            This method returns the item in an enumeration with the maximum property value.
            It enumerates items only once.  It does not waste time sorting items.
            </summary>
            <typeparam name="TItem">The type of the items in the enumeration.</typeparam>
            <typeparam name="TProperty">The type of the item property to be examined.</typeparam>
            <param name="Items">The items to enumerate.</param>
            <param name="GetPropertyValue">
            A function that- given an item, the best item found so far, and the GetPropertyValue function (in that order)-
              returns a boolean indicating if the item is better.</param>
            <returns>The best item (according to the GetPropertyValue function) in the enumeration.</returns>
        </member>
        <member name="M:BT.Core.EnumerableExtension.GetMinAndMaxItems``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            This method returns the minimum and maximum items (according to GetPropertyValue) found in an enumeration.
            It enumerates items only once.  It does not waste time sorting items.
            </summary>
            <typeparam name="TItem">The type of the items in the enumeration.</typeparam>
            <typeparam name="TProperty">The type of the item property to be examined.</typeparam>
            <param name="Items">The items to enumerate.</param>
            <param name="GetPropertyValue">
            A function that- given an item, the best item found so far, and the GetPropertyValue function (in that order)-
              returns a boolean indicating if the item is better.</param>
            <returns>The best item (according to the GetPropertyValue function) in the enumeration.</returns>
        </member>
        <member name="M:BT.Core.EnumerableExtension.GetBestAndWorstItems``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``0,System.Func{``0,``1},System.Boolean})">
            <summary>
            This method returns the best and worst items (according to GetPropertyValue) found in an enumeration.
            It enumerates items only once.  It does not waste time sorting items.
            </summary>
            <typeparam name="TItem">The type of the items in the enumeration.</typeparam>
            <typeparam name="TProperty">The type of the item property to be examined.</typeparam>
            <param name="Items">The items to enumerate.</param>
            <param name="GetPropertyValue">A function that- given an item- returns its property value to be examined.</param>
            <param name="IsBetterItem">
            A function that- given an item, the best item found so far, and the GetPropertyValue function (in that order)-
              returns a boolean indicating if the item is better.</param>
            <returns>A tuple of the best item and worst item (according to the GetPropertyValue function) in the enumeration.</returns>
        </member>
        <member name="M:BT.Core.EnumerableExtension.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Break an larger enumerable into several lists of specified size.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">Large enumerable</param>
            <param name="chunksize">size of the pieces returned</param>
            <returns>IEnumerable of chunks as List of T</returns>
        </member>
        <member name="M:BT.Core.ListExtension.CalculateDiff``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            This method returns an object with three property collections of system IDs that represent the items...
                1) Added to
                2) Removed from
                3) Remaining in...
              ... the updated list (compared to the original list).  This can be used when a client POSTS a collection to a server and the server method
              must determine what modifications the client made (typically to a collection that "round-tripped"- meaning it was downloaded earlier from
              a GET method) in order to perform the correct CRUD operations when persisting the collection to a database.
            </summary>
            <typeparam name="T">Type of objects in the original and updated lists.</typeparam>		
            <typeparam name="TSid">Type of system ID.</typeparam>
            <param name="OriginalList">The original list extended by this method.  Typically a list retrieved from a database on a server.</param>
            <param name="UpdatedList">The updated list.  Typically a list modified by a client.</param>
            <param name="GetSid">A delegate to a function that accepts a parameter of type T and returns a type TSid representing a system ID.</param>
            <returns>A ListDiff of type TSid with HashSet properties of system IDs Added, Removed, and Remaining.</returns>
        </member>
        <member name="M:BT.Core.ListExtension.CalculateDiff``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Func{``0,``2},System.Func{``1,``2})">
            <summary>
            This method returns an object with three property collections of system IDs that represent the items...
                1) Added to
                2) Removed from
                3) Remaining in...
              ... the updated list (compared to the original list).  This can be used when a client POSTS a collection to a server and the server method
              must determine what modifications the client made (typically to a collection that "round-tripped"- meaning it was downloaded earlier from
              a GET method) in order to perform the correct CRUD operations when persisting the collection to a database.
            </summary>
            <typeparam name="TOriginal">Type of objects in the original list.</typeparam>
            <typeparam name="TUpdated">Type of objects in the updated list.</typeparam>
            <typeparam name="TSid">Type of system ID.</typeparam>
            <param name="OriginalList">The original list extended by this method.  Typically a list retrieved from a database on a server.</param>
            <param name="UpdatedList">The updated list.  Typically a list modified by a client.</param>
            <param name="GetOriginalSid">A delegate to a function that accepts a parameter of type TOriginal and returns a type TSid representing a system ID.</param>
            <param name="GetUpdatedSid">A delegate to a function that accepts a parameter of type TUpdated and returns a type TSid representing a system ID.</param>
            <returns>A ListDiff of type TSid with HashSet properties of system IDs Added, Removed, and Remaining.</returns>
        </member>
        <member name="M:BT.Core.ObjectExtension.DeepCopy``1(``0,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Performs a recursive copy of all class fields (public and private), except those the caller specifies should not be copied.
            </summary>
            <remarks>
            Supports circular references and fields whose type is an interface or abstract class.
            In comparison, Object.MemberwiseClone in the Base Class Library performs a shallow copy.  Reference type fields of the copy point to the original reference.
            In other words, for reference type fields...
            For MemberwiseClone():  Object.ReferenceEquals(copy.FieldName, original.FieldName) == true;
            For DeepCopy():         Object.ReferenceEquals(copy.FieldName, original.FieldName) == false;
            </remarks>
            <param name="Original"></param>
            <param name="HonorJsonIgnoreAttr">True = Skip fields with [JsonIgnore] attribute.  False = Copy all fields regardless of [JsonIgnore] attribute.</param>
            <param name="SkipFields">List of field names to skip.  This takes precedence over the HonorJsonIgnoreAttr parameter.</param>
        </member>
        <member name="M:BT.Core.TypeExtensions.GetEmptyCtor(System.Type,System.Boolean)">
            <summary>
            Helper extension that uses reflection to get an empty constructor for this type.  If there
            is no available empty constructor, this will return null.
            </summary>
            <param name="type"></param>
            <param name="publicOnly"></param>
            <returns>A type that can be used to create an instance of that type</returns>
        </member>
        <member name="T:BT.Core.Logger.Providers.ConsoleLogger">
            <summary>
            Logs to Hangfire.[Set] table in the hangfire database.
            </summary>
        </member>
        <member name="F:BT.Core.Logger.ELogLevel.Trace">
            <summary>
            Logs that contain the most detailed messages. These messages may contain sensitive application data.
            These messages are disabled by default and should never be enabled in a production environment.
            </summary>
        </member>
        <member name="F:BT.Core.Logger.ELogLevel.Debug">
            <summary>
            Logs that are used for interactive investigation during development.  These logs should primarily contain
            information useful for debugging and have no long-term value.
            </summary>
        </member>
        <member name="F:BT.Core.Logger.ELogLevel.Information">
            <summary>
            Logs that track the general flow of the application. These logs should have long-term value.
            </summary>
        </member>
        <member name="F:BT.Core.Logger.ELogLevel.Warning">
            <summary>
            Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the
            application execution to stop.
            </summary>
        </member>
        <member name="F:BT.Core.Logger.ELogLevel.Error">
            <summary>
            Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a
            failure in the current activity, not an application-wide failure.
            </summary>
        </member>
        <member name="F:BT.Core.Logger.ELogLevel.Critical">
            <summary>
            Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires
            immediate attention.
            </summary>
        </member>
        <member name="F:BT.Core.Logger.ELogLevel.None">
            <summary>
            Not used for writing log messages. Specifies that a logging category should not write any messages.
            </summary>
        </member>
        <member name="M:BT.Core.Logger.ILogger.Log``1(BT.Core.Logger.ELogLevel,System.String,System.Exception)">
            <summary>
            Writes a log entry.
            </summary>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="message">string mesasge to log</param>
            <param name="exception">The exception related to this entry.</param>
        </member>
        <member name="M:BT.Core.Logger.ILogger.Log``1(BT.Core.Logger.ELogLevel,System.String,System.Exception,System.Object[])">
            <summary>
            Writes a log entry.
            </summary>
            <param name="logLevel">Entry will be written on this level.</param>
            <param name="message">string mesasge to log</param>
            <param name="propertyValues">property values used to populate message template.</param>
            <param name="exception">The exception related to this entry.</param>
        </member>
        <member name="M:BT.Core.Logger.ILogger.LogStatistics(System.String,System.Single)">
            <summary>
            Logs txn data statistic name value pair
            </summary>
            <param name="metricNm">The name or description of the metric being logged.</param>
            <param name="val">The value of the the metric being logged.</param>
        </member>
        <member name="M:BT.Core.Logger.ILogger.IsEnabled(BT.Core.Logger.ELogLevel)">
            <summary>
            Checks if the given <paramref name="logLevel"/> is enabled.
            </summary>
            <param name="logLevel">level to be checked.</param>
        </member>
        <member name="M:BT.Core.Logger.ILogger.BeginScope``1(``0)">
            <summary>
            Begins a logical operation scope.
            </summary>
            <param name="state">The identifier for the scope.</param>
            <returns>An IDisposable that ends the logical operation scope on dispose.</returns>
        </member>
        <member name="M:BT.Core.Logger.ILoggerFactory.CreateLogger(System.String)">
            <summary>
            Creates a new <see cref="T:BT.Core.Logger.ILogger"/> instance.
            </summary>
            <param name="categoryName">The category name for messages produced by the logger.</param>
            <returns>The <see cref="T:BT.Core.Logger.ILogger"/>.</returns>
        </member>
        <member name="T:BT.Core.EAS.ContactSecurity">
            <summary>
            We store security rights within BigTime on a per-user basis.  This class can be used to return True/False on security rights per user.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ContactSecurity.GetGroupList(System.String)">
            <summary>
            Accepts a hex number and gets the groupIDs of which this user is a member from that number
            </summary>
            <param name="HexMembership">from tblStaff!Security</param>
            <returns>BYTE array with IDs of the groups to which this user belongs</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ContactSecurity.IsRptPermitted(System.String,System.String)">
            <summary>
            Called from the reporting engine's page(s) in order to determine if a user has rights to view a specific report
            </summary>
            <param name="HexReport">tblReport_Security!Security</param>
            <param name="HexUser">tblStaff!Security</param>
            <returns>TRUE if both the user and the report are member(s) of a group (e.g. - both admin, both PM, etc).  ALSO returns true if the report isn't protected (e.g. - available to anyone)</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ContactSecurity.IsPermitted(System.String,System.Int64)">
            <summary>
            This function is used to check binary permission strings (e.g. - TF stored as a
            binary string of 0/1's ... 00011011.  NOTE that the first position in this string
            is ALL THE WAY to the RIGHT.
            </summary>
            <param name="PermitList"></param>
            <param name="PermitItem"></param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.EAS.ContactSecurity.IsPermittedByUser(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Pass a User's Security value, a specific PermitSet/ID and get TRUE if the user has that permission
            </summary>
            <param name="HexMembership">from tblStaff!Security</param>
            <param name="PermitList"></param>
            <param name="PermitItem"></param>
            <param name="Sid"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ContactSecurity.GetPermitList(System.String,System.Int64,System.Int64)">
            <summary>
            Returns a binary set of permission list values for the PermitList requested (e.g. - "00100011")
            </summary>
            <param name="HexMembership">typically from tblStaff!Security</param>
            <param name="PermitListId">ID of the permit "section" to return</param>
            <param name="Sid">If we're looking at permissions for a specific object (eg - a shelf in the library), then this parameter contains that object's ID number</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ContactSecurity.IsPermittedByCurrentUser(System.Int64,System.Int64,System.Int64)">
            <summary>
            This is the shortcut version of IsPermittedByUser - valid ONLY if the StaffSid was supplied when this security context was created (eg - passed in as a parameter of the New() sub)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ContactSecurity.IsPermittedByUserSID(System.Int64,System.Int64,System.Int64)">
            <summary>
            Pass a User's ContactSid value, a specific PermitSet/ID and get TRUE if the user has that permission
            </summary>
            <param name="ContactSid">From tblStaff!StaffSID or, more often, _Globals.VarList.LoginStaffSID</param>
            <param name="PermitList"></param>
            <param name="PermitSid"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ContactSecurity.IsGroupMember(System.String,System.Int64)">
            <summary>
            Use this function to see if a user is a member of a specific security group
            </summary>
            <param name="HexMembership">Typically, from tblStaff!Security</param>
            <param name="GroupId">stblSecurity_Groups!GroupID</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ContactSecurity.RemoveGroup(System.Int32,System.Collections.ArrayList)">
            <summary>
            Called by BigTime to delete a security group and to adjust the various security tables (a non-trivial task)
            </summary>
            <param name="Id"></param>
            <param name="ErrorList"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ContactSecurity.GrantPermissionByGroup(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Grants/revokes permissions to/from a specified group (used a lot in the BigTime updates)
            </summary>
            <param name="GroupSid">from stblSecurity_Groups!GroupID</param>
            <param name="PermitSet">PermitSet number</param>
            <param name="Permit">permitID number</param>
            <param name="Revoke">TRUE if the permit should be revoked, not granted</param>
        </member>
        <member name="T:BT.Core.EAS.EMail">
            <summary>
            Used to send emails from BigTime's standard set of system emails
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.EAS.EAMerge">
            <summary>
            BigTime frequently merges database or collection data from a recordset into a existing text.  We've encapsulated that process into this EAMerge module.
            Data can be merged into a text file from a recordsource, various collections and each BigTime business objects.  Take a look at the ReplaceTags functions in this module for details.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.GetPropertyValueDeep(System.Object,System.String,System.Boolean)">
            <summary>
            Encapsulates REFLECTION for objects, so we can reference a property using a string (e.g. - "TeamList.1.FirstNm")
            </summary>
            <param name="p_CLASS">An object to examine</param>
            <param name="p_sPropertyNm">The full name of the property to retrieve.  Separate "sub-class" names using a period.  See detailed documentation for help on using the function to access property names.</param>
            <param name="defaultToNull">Set this to TRUE if you want to return NULL if the property cannot be found through reflection</param>
            <returns></returns>
            <remarks>
            <para>When classes are created, any properties that are access or set from web pages should be defined as Properties (with a corresponding get/set function).  Then, the web page processing engine can use this function to set an object's properties based on the input field's "name" property.</para>
            <para>Several objects within the system support "sub-objects" or "collections."  The EAProject object, for example, has an EAClient sub-object, and a TeamList collection (a collection of team members) To access those sub items, We use a period-based naming convention (e.g. - TeamList.2.FirstNm will pull the "firstNm" field for the TeamMember object that corresponds to the index value of "1").</para>
            <para>Note that this function will return an ERROR if the field you are attempting to access does not exist.  The calling function is responsible for dealing with that error.</para>
            </remarks>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.SetPropertyValueDeep(System.Object,System.String,System.Object)">
            <summary>
            Encapsulates REFLECTION for objects, so we can SET the value of a property using a string for that property's name (e.g. - "TeamList.1.FirstNm")
            </summary>
            <param name="p_CLASS">An iEAWC object to examine</param>
            <param name="p_sPropertyNm">The full name of the property to set.  Separate "sub-class" names using a period.  See detailed documentation for help on using the function to access property names.</param>
            <param name="p_Val">The value to which this property should be set.</param>
            <returns></returns>
            <remarks>
            <para>When iEAWC classes are created, any properties that are access or set from web pages should be defined as Properties (with a corresponding get/set function).  Then, the web page processing engine can use this function to set an object's properties based on the input field's "name" property.</para>
            <para>Several objects within the system support "sub-objects" or "collections."  The EAProject object, for example, has an EAClient sub-object, and a TeamList collection (a collection of team members) To access those sub items, We use a period-based naming convention (e.g. - TeamList.2.FirstNm will pull the "firstNm" field for the TeamMember object that corresponds to the index value of "1").</para>
            <para>Note that this function will return an ERROR if the field you are attempting to set does not exist or if the value you are passing is invalid for the property.  Note that the calling function is responsible for dealing with that error.</para>
            </remarks>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.FN_GetPropertyByNm(System.Object,System.String[],System.Int64,System.Int64)">
            <summary>
            Called by GetPropertyValue and SetPropertyValue (used to catch/match problems that may come up with overloaded properies.
            </summary>
            <param name="p_cObj"></param>
            <param name="p_aPropList"></param>
            <param name="p_iCnt"></param>
            <param name="p_nBindingFlags"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.ReturnPropertyList(System.String)">
            <summary>
            Accepts an HTML/XML tag with attributes and returns a Hashtable with attribute/value.  Note that the list can be loosely-formatted (as in HTML)
            </summary>
            <param name="p_sObjDef">HTML/XML TAG (completed with &gt; and &lt; symbols)</param>
            <returns></returns>
            <remarks>Function will look for well-formed attribute tags first (eg - Item="Value"), then attributes with single-quotes, then attributes with NO quotes.</remarks>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.ReturnPropertyTags(System.String)">
            <summary>
            Returns a list of attribute from within a &lt;WCPROPS &gt; tag.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.FormatVocab(System.String,BT.Core.ADO.IRepoSource)">
            <summary>
            Call this function to replace VOCABULARY tags with data from a the global vocab list.
            </summary>
            <param name="p_sString">String to merge data into.</param>
            <param name="p_cGlobals">BTGlobals.IGlobals objects containing the vocabulary tags to be merged.</param>
            <returns></returns>
            <remarks><para>This simple tag replacement routine is meant to quickly merge system vocabulary into strings.  For more robust tag replacement, take a look at the MergeRow functions in this object.</para>
            <para>For this simple merge, BigTime supports a basic {#vocab} tag.  an example of this tag in use is shown below</para>
            <code title="Using the Fld Merge Tag">
            sText = "The following {#vocab=Project;0} {#vocab=Prj_Task;0}s have not been closed."
            sText = EAS.EAMerge.FormatTags(sText,_cGlobals)
            </code>
            Using this code, sText will read "The following project tasks have not been closed."
            <para>BigTime pulls the values for vocabulary items from the BTGlobals.IGlobals object (in this case, _cGlobals), and it merges them into the text at the appropriate spot.  </para>
            <para>Note that the merge tag supports a special "format" string.  This string takes a 0, 1 or 2 value: 0 is lower-case, 1 is upper-case and 2 is proper-case.</para>
            </remarks>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.FormatTagsForAngular(System.String,BT.Core.BTGlobals.IGlobals)">
            <summary>
            This is a pre-processor that formats a string of text that contains angular-specific replacement tags.  It will replace "{{fldNm|date}}" with "{{fldNm||MM/DD/YYYY}}" for example.
            </summary>
            <param name="p_sString"></param>
            <param name="p_cGlobals">Pass null to this parameter if you would like to use typical US-based date/time and currency formats.</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.MergeVocabAngular(System.String,BT.Core.BTGlobals.IGlobals)">
            <summary>
            Replace simple angular tags with vocab values (eg - {{PROJECT}} becomes "Project")
            </summary>
            <param name="value"></param>
            <param name="globals">Globals object who's vocab is to be used</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.FormatTags(System.String,System.Object,System.Boolean)">
            <summary>
            Call this function to replace fld tags with data from an object.  String format should contain {#fld=XX} tags.
            </summary>
            <param name="p_sString">String to merge data into.</param>
            <param name="p_EAWC">class object containing the data to be merged.</param>
            <param name="p_bHTMLSafe">TRUE if html tags like ampersand and quote should be replaced with their html-safe equivalents.</param>
            <returns></returns>
            <remarks><para>The tag replacement process in BigTime is meant to replace simple field values.  For more robust tag replacement, take a look at the MergeRow functions in this object.</para>
            <para>For this simple merge, BigTime supports a basic {#fld} tag.  an example of this tag in use is shown below</para>
            <code title="Using the Fld Merge Tag">
            sText = "The project {#fld=PrjNm} has {#BudgetRemaining:#,##0.00} dollars remaining."
            sText = EAS.EAMerge.FormatTags(sText,cHash)
            </code>
            The system will pull values for PrjNm and BudgetRemaining from the EAS.Hashlist(cHash) object and merge them into the text at the appropriate spot.
            <para>Note that the merge tag supports a "format" string.  Format strings can take any format supported by String.Format.  Note that it also implements a "boolean" formatter (eg. - {#fld=BooleanField:1;0} will return a 1 if BooleanField is TRUE and a 0 if it is FALSE).</para>
            </remarks>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.FormatTags(System.String,System.Data.DataRow,System.Boolean)">
            <summary>
            Call this function to replace fld tags with data from a database.
            </summary>
            <param name="p_sString">String to merge data into.</param>
            <param name="p_rs">Datarow containing the data to be merged.</param>
            <param name="p_bHTMLSafe">TRUE if we should replace ampersands, gt and lt signs and quotes with their html tag equivalent</param>
            <returns></returns>
            <remarks><para>The tag replacement process in BigTime is meant to replace simple field values.  For more robust tag replacement, take a look at the MergeRow functions in this object.</para>
            <para>For this simple merge, BigTime supports a basic {#fld} tag.  an example of this tag in use is shown below</para>
            <code title="Using the Fld Merge Tag">
            sText = "The project {#fld=PrjNm} has {#BudgetRemaining:#,##0.00} dollars remaining."
            sText = EAS.EAMerge.FormatTags(sText,cDataRow)
            </code>
            The system will pull values for PrjNm and BudgetRemaining from the datarow (cDataRow) object and merge them into the text at the appropriate spot.
            <para>Note that the merge tag supports a "format" string.  Format strings can take any format supported by String.Format.  Note that it also implements a "boolean" formatter (eg. - {#fld=BooleanField:1;0} will return a 1 if BooleanField is TRUE and a 0 if it is FALSE).</para>
            </remarks>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.FormatAngular(System.String,System.Object,System.Boolean)">
            <summary>
            Replace angular style moustache tags with data from an object (expression should contain {{FldNm|Fmt}} style tags.
            <para>To evaluate mathematical expressions, wrap the expression with square brackets e.g. {{[0.1*FldNm]}}.</para>
            </summary>
            <param name="p_sString">The original expression to evaluate (the string that contains the tags).</param>
            <param name="p_EAWC">The object whose field values are used as tag values</param>
            <param name="p_bHTMLSafe">TRUE to remove/replace html unsafe characters (eg - so these results can be merged in to XML)</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.ReplaceVocabTags(BT.Core.BTGlobals.IGlobals,System.String)">
            <summary>
            Accepts a string that may contain 1 or more WC@VOCAB tags and replaces those tags with
            vocabulary values.  Note that newer code should use the FormatTags function(s) instead
            We no longer user WC@VOCAB tags -- we only use {#vocab} tags.
            </summary>
            <param name="Globals"></param>
            <param name="p_sVal">String to search/replace tags within</param>
            <returns>a new string with tags replaced.</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.FN_ApplyGlobalFormat(BT.Core.BTGlobals.IGlobals,System.String)">
            <summary>
            Used to apply global formats to a format string
            </summary>
        </member>
        <member name="M:BT.Core.EAS.EAMerge.FN_ApplyUSFormat(System.String)">
            <summary>
            Called by the ReplaceTags function (used to apply global formats to a format string)
            </summary>
        </member>
        <member name="T:BT.Core.EAS.Security">
            <summary>
            We store security rights within BigTime on a per-user basis.  This class can be used to return True/False on security rights per user.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.IsMyProject(System.Int64)">
            <summary>
            Returns TRUE if the user either <B>HAS PERMISSION TO SEE ALL PROJECTS</B> or <B>IS ON THE PROJECT TEAM</B>
            </summary>
            <param name="p_nPrjSID">SystemID of the project to check</param>
            <returns>Note that we use LOGIN_SECURITY and LOGIN_UID in the _Globals object used to instantiate this class</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.MyProjectsOnly(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns a list of Project SIDs where the user either <B>HAS PERMISSION TO SEE ALL PROJECTS</B> or <B>IS ON THE PROJECT TEAM</B>
            </summary>
            <param name="projectSidList">List of SystemIDs' of projects to check</param>
        </member>
        <member name="M:BT.Core.EAS.Security.IsProjectTeamLead(System.Int64)">
            <summary>
            Returns TRUE if the user is the PROJECT TEAM LEAD 
            </summary>
            <param name="p_nPrjSID">SystemID of the project to check</param>
            <remarks>Note that we use LOGIN_SECURITY and LOGIN_UID in the _Globals object used to instantiate this class</remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.IsMyStaff(System.Int64)">
            <summary>
            Returns TRUE if the user either <B>HAS PERMISSION TO SEE ALL STAFF</B> or <B>MANAGES THIS STAFF MEMBER'S GROUP</B>
            </summary>
            <param name="p_nStaffSID">StaffSID of the project to check</param>
            <returns>Note that we use LOGIN_SECURITY and LOGIN_UID in the _Globals object used to instantiate this class</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.GetGroupList(System.String)">
            <summary>
            Accepts a hex number and gets the groupIDs of which this user is a member from that number
            </summary>
            <param name="p_sHEX_Membership">from tblStaff!Security</param>
            <returns>BYTE array with IDs of the groups to which this user belongs</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.IsRptPermitted(System.String,System.String)">
            <summary>
            Called from the reporting engine's page(s) in order to determine if a user has rights to view a specific report
            </summary>
            <param name="p_sHEX_Report">tblReport_Security!Security</param>
            <param name="p_sHEX_User">tblStaff!Security</param>
            <returns>TRUE if both the user and the report are member(s) of a group (e.g. - both admin, both PM, etc).  ALSO returns true if the report isn't protected (e.g. - available to anyone)</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.GrantPermissionByGroup(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Grants/revokes permissions to/from a specified group (used a lot in the BigTime updates)
            </summary>
            <param name="p_nGroupSID">from stblSecurity_Groups!GroupID</param>
            <param name="p_nPermitSet">PermitSet number</param>
            <param name="p_nPermit">permitID number</param>
            <param name="p_bRevoke">TRUE if the permit should be revoked, not granted</param>
        </member>
        <member name="M:BT.Core.EAS.Security.GetPermitList(System.String,System.Int64,System.Int64)">
            <summary>
            Returns a binary set of permission list values for the PermitList requested (e.g. - "00100011")
            </summary>
            <param name="p_sHEX_Membership">typically from tblStaff!Security</param>
            <param name="p_nPermitListID">ID of the permit "section" to return</param>
            <param name="p_nSID">If we're looking at permissions for a specific object (eg - a shelf in the library), then this parameter contains that object's ID number</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.IsPermittedByUser(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Pass a User's Security value, a specific PermitSet/ID and get TRUE if the user has that permission
            </summary>
            <param name="p_sHEX_Membership">from tblStaff!Security</param>
            <param name="p_nPermitList"></param>
            <param name="PermitItem"></param>
            <param name="p_nSID"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.IsPermittedByCurrentUser(System.Int64,System.Int64,System.Int64)">
            <summary>
            This is the shortcut version of IsPermittedByUser - valid ONLY if the StaffSid was supplied when this security context was created (eg - passed in as a parameter of the New() sub)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.IsPermittedByUserSID(System.Int64,System.Int64,System.Int64)">
            <summary>
            Pass a User's StaffSID value, a specific PermitSet/ID and get TRUE if the user has that permission
            </summary>
            <param name="p_nStaffSID">From tblStaff!StaffSID or, more often, _Globals.VarList.LoginStaffSID</param>
            <param name="p_nPermitList"></param>
            <param name="p_nPermitSID"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.IsGroupMember(System.String,System.Int64)">
            <summary>
            Use this function to see if a user is a member of a specific security group
            </summary>
            <param name="p_sHEX_Membership">Typically, from tblStaff!Security</param>
            <param name="p_nGroupID">stblSecurity_Groups!GroupID</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.RemoveGroup(System.Int32,System.Collections.ArrayList)">
            <summary>
            Called by BigTime to delete a security group and to adjust the various security tables (a non-trivial task)
            </summary>
            <param name="p_nID"></param>
            <param name="p_cErrorList"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.Security.AddESignature(BT.Core.Security.ESignatureParams)">
            <summary>
            Called by transactions to create a new record in tblESignature.  Will return that new record's ESIG ID (or raise an error)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.EAS.EAGen">
            <summary>
            The nuts and bolts programming functionality in this class automates many of the routine tasks performed throughout the system (e.g. - converting strings to numeric values, validating a boolean value, etc.).
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.EAS.EAGen.XMLEncode">
            <summary>
            A helper method to encode special characters for use in an XML document.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ContainsNonLatin1Characters(System.String)">
            <summary>
            Returns true if this string contains characters that are not in the Latin-1 character set.
            </summary>
            <param name="val"></param>
            <remarks>The Latin-1 character set is the set of characters allowed by SQL Server Collation SQL_Latin1_General_CP1_CI_AS</remarks>
            <returns></returns>
        </member>
        <member name="M:BT.Core.EAS.EAGen.CCur(System.Object)">
            <summary>
            Converts a numeric value into an EAS.Currency value
            </summary>
            <param name="p_Val">Numeric value to be converted</param>
        </member>
        <member name="M:BT.Core.EAS.EAGen.GetEnvironmentName(System.Uri)">
            <summary>
            Gets the subdomain/environment
            </summary>
            <param name="p_requestUrl">Request Url used to get environment information</param>
        </member>
        <member name="M:BT.Core.EAS.EAGen.Replace(System.String,System.String,System.String)">
            <summary>
            Provides a try/catch blocked case insensitive replace mechanism
            </summary>
            <param name="Expression">The string to be searched</param>
            <param name="Find">The string to be replaced</param>
            <param name="Replacement">The replacement string</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.EAFormat(System.String,System.String,BT.Core.BTGlobals.IVars)">
            <summary>
            Converts a value into a localized date or currency value.
            </summary>
            <param name="p_sVal">Value to be converted.</param>
            <param name="p_sFmt">DTFORMAT_2; DTFORMAT_4; FORMAT_CURRENCY; FORMAT_CURRENCY_LONG</param>
            <param name="p_cGVARS">A BTGlobals.VarList object</param>
            <returns></returns>
            <remarks>Note that the localization is set when the BTGlobals project is initialized (based on the database's native language and the user's "regional settings" selections in the system.</remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.FormatSQLData(BT.Core.BTGlobals.IGlobals,System.Object,System.Int64,System.Boolean)">
            <summary>
            Returns data formatted for insersion into SQL Server (e.g. - strings will be packed and quoted, dates formatted correctly, etc.).
            NOTE that the function will delimit the values properly as well (so no need to surround text, for example, with the quote character).
            </summary>
            <param name="p_Globals"></param>
            <param name="p_val">Value to be formatted</param>
            <param name="p_nType">STRING(167), BOOLEAN(104), DATE(58), INTEGER(56), NUMERIC(100)</param>
            <param name="p_bIsNullable">TRUE will return NULL for an empty string or a DBNull value</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.FormatSQLData(BT.Core.BTGlobals.IGlobals,System.Object,System.Data.SqlDbType,System.Boolean)">
            <summary>
            When we save data to a SQL table, this function formats it properly (removing ' from strings and formatting BIT values as 0/1 for example).
            </summary>
            <param name="p_Globals">BTGlobals.IGlobals object</param>
            <param name="p_val">Value to format</param>
            <param name="p_nType">SQLDBType</param>
            <param name="p_bIsNullable">TRUE if null values are permitted</param>
            <returns></returns>
            <remarks>Formatting is available for character, bit, date, integer values.  All else is considered "numeric"</remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.FormatSQLData(BT.Core.ADO.IRepoSourceVars,System.Object,System.Boolean)">
            <summary>
            Instead of passing a specific SQL data type to the function, this version of FormatSQLData relies on the datatype of the <paramref name="p_val ">VALUE</paramref> parameter to determine the formatting required.
            </summary>
            <param name="ADOFormats">BTGlobals.IVarlist object</param>
            <param name="p_val">Value to format</param>
            <param name="p_bIsNullable">TRUE if null values are permitted</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.HTMLSafe(System.String,System.Boolean)">
            <summary>
            Returns a string that contains no HTML-specific tags.
            </summary>
            <param name="p_sVal">Value to be made HTML-safe</param>
            <param name="p_bRemoveAMP">TRUE by default (removes the &amp; character)</param>
            <returns></returns>
            <remarks>This function will convert the string greater-than signs to &amp;gt;, etc.</remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.EnQuote(System.String)">
            <summary>
            Converts single quotes to double quotes and then puts single quotes around the whole string.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ReturnADODate(System.String,System.String)">
            <summary>
            Dates can come from SQL Server as YYYYMMDD or DD-MM-YYYY/MM-DD-YYYY.  The function will accept any of those formats and convert them into a valid "date" string
            </summary>
            <param name="p_sVal">Value to be converted to a valid date.</param>
            <param name="p_sDtFormat">Format to be used (e.g. - "dd/mm/yy") Typically, BTGlobals.VarList.dtFormat_4.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ReturnDouble(System.Object)">
            <summary>
            Returns a numeric (Double) value from any string.  Removes %, $, comma, space, etc.  NULLS are automatically converted to zero.
            </summary>
            <param name="p_sVal">String/value to be converted</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ReturnNumeric``1(System.Object)">
            <summary>
            Returns a numeric value (of the specified type) from any string/object. (see ReturnNumeric for more details).
            </summary>
            <param name="p_sVal">String/value to be converted</param>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ReturnNumeric``1(System.Object,``0)">
            <summary>
            Returns a numeric value (of the specified type) from any string/object. (see ReturnNumeric for more details).
            </summary>
            <param name="p_sVal">String/value to be converted</param>
            <param name="DefaultValue">Value to return if conversion fails.</param>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ReturnEnum``1(System.Object,System.Boolean)">
            <summary>
            Returns an Enumeration for the value passed in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_sVal"></param>
            <param name="IgnoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ReturnNumericOnly(System.String)">
            <summary>
            Used to convert a string to a numeric value (removes letters, special characters, etc.)
            </summary>
            <param name="p_sData"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ReturnNumFromText(System.String)">
            <summary>
            Converts a string into a "pure" digit (e.g. - "$399.99" -> 399.99)
            </summary>
            <param name="p_sNumber"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ReturnValidFileName(System.String,System.Boolean)">
            <summary>
            Parses the passed Filename (p_sFilename) and returns a valid Filename.
            Should be called to "cleanup" a user-entered file name so we make sure
            the name contains ONLy valid characters.
            </summary>
            <param name="p_sFileNm">name of file to check.</param>
            <param name="p_bFullPath">TRUE if this is a full path name.  FALSE if it is just a file name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ToShortDateStringIfDate(System.Object)">
            <summary>
            Used in conjunction with functions that return dynamic objects for the purposes of easily formatting date objects as a short date.
            </summary>
            <param name="obj"></param>
            <returns>returns a short date or object.toString()</returns>
        </member>
        <member name="M:BT.Core.EAS.EAGen.DeNull(System.Object,System.Object)">
            <summary>
            Removes null values (DBNull).
            </summary>
            <param name="p_vVal">Value to check</param>
            <param name="p_vDefaultVal">Value to be used in place of NULL if p_vVal is null</param>
        </member>
        <member name="M:BT.Core.EAS.EAGen.DeNull(System.Object)">
            <summary>
            Removes null values (DBNull).
            </summary>
            <param name="p_vVal">Value to check</param>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ReturnBool(System.Object,System.Boolean)">
            <summary>
            Converts a value to BOOLEAN (and catches the exception if the value is not BOOLEAN
            </summary>
        </member>
        <member name="M:BT.Core.EAS.EAGen.XLSGetColumnFromID(System.Int32)">
            <summary>
            Converts an absolute column number to an "Excel" column ID (e.g. - column #4 = "D").  Supports up to 78 columns.
            </summary>
            <param name="p_nColID">The column's ordinal number (starting with 1)</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.EAS.EAGen.HEX">
            <summary>
            A class that's used to convert 2-digit HEX values into a set of binary values and back
            </summary>
            <remarks>We store security and some access data in HEX values to make them easier to serialize in the Dabatabase</remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.HEX.HexToBinary(System.String,System.Int64)">
            <summary>
            Returns the 8 digit binary equivalent of a HEX value (used to store
            multiple T/F values in a single compact field)
            </summary>
            <param name="p_sHEX">HEX value to convert (eg - "A1")</param>
            <param name="p_nLEN">Length of the hex value (if it should be greater than 2</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.HEX.NumToBinary(System.Int64)">
            <summary>
            Returns the 8-digit binary equivalent of a number (e.g. - 1 = "00000001"; 2="00000010").  Returns 00000000 if the conversion fails.
            </summary>
            <param name="p_nNum">Integer to convert</param>
        </member>
        <member name="M:BT.Core.EAS.EAGen.HEX.BinaryToNum(System.String)">
            <summary>
            Accepts an 8-digit binary string and converts it to a LONG integer
            </summary>
            <param name="p_sBin">Binary number to convert (e.g. - "0000001")</param>
        </member>
        <member name="M:BT.Core.EAS.EAGen.GetTimesheetPeriod(BT.Core.BTGlobals.IGlobals,System.DateTime)">
            <summary>
            Pass a globals object that represents a specific firm and a date to this function.  It will return the timesheet period (start date) which CONTAINS that date.
            </summary>
            <param name="p_cGlobals"></param>
            <param name="p_dt"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.AddToBudgetPER(System.Int64,System.Int64)">
            <summary>
            Adds a set number of periods to the BudgetPeriod you specify
            </summary>
            <param name="p_nPeriodID">Staring Period</param>
            <param name="p_nAdd">Number of periods to move (positive or negative)</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.DateFromPeriod(System.Int64)">
            <summary>
            Converts a financial period into a date (eg. - 200701 = 1/1/2007)
            </summary>
            <param name="p_nPeriodID">YYYYMM</param>
        </member>
        <member name="M:BT.Core.EAS.EAGen.EvalExp(System.String)">
            <summary>
            Evaluates SIMPLE expressions (operator prescedence is ignored) as are parens. Supports CEILING; FLOOR; IIF; +, --, *, and /.   
            <para>Used primarily in custom invoice line item creation.</para>
            </summary>
            <param name="p_sExp"></param>
            <returns>For a more complete expression evaluator, use the Evaluator object in the library.</returns>
            <remarks>CEILING:  CEILING(x,y).  Return X if X&lt;Y.  Otherwise, return Y.
            <para>CEILING:  CEILING(x,y).  Return X if X&gt;Y.  Otherwise, return Y.</para>
            <para>IIF:  IIF(bool,x,y).  Return X if bool==true.  Otherwise, return Y.</para>
            </remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.EXP_Evaluate(BT.Core.BTGlobals.IGlobals,System.Int64,System.String,System.Collections.IDictionary,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Replaces variable tags in an expression with values from the database or from the user's settings. 
            Syntax for a paramter is &lt;#PARAMTYPE=PARAMNAME;DefaultValue&gt; and ParameterType can be:
            <para>#G_VAR (Globals.VarList properties); #SETTING (GlobalSetting -  eg: iis.VarNm); #cPROP / #VAR (dictionary values),</para>
            <para>#VOCAB (system vocabulary value); #UID (the StaffSID value),  #ISPERMIT  (0/1 for user permission; format= PERMITSET.PERMITID),</para>
            <para>#URL (full base-url of the BigTime site)</para>
            </summary>
            <param name="Globals">Valid EAGlobals object</param>
            <param name="p_nUID">The user's StaffSID value</param>
            <param name="p_sExp">The Expression to evaluate</param>
            <param name="PropertyList">a collection of session-specific properties (#PROP values)</param>
            <param name="VariableList">a collection of session-specific properties (#VAR values)</param>
            <param name="p_bNoSpaces">TRUE if the system should not insert spaces before/after each replaced clause.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.CreatePath(System.String,System.Boolean)">
            <summary>
            Checks to see if a directory exists, and creates it if it does not (including any missing PARENT directories).
            </summary>
            <param name="p_sPathNm">PATH to verify</param>
            <param name="p_bRaiseErr">TRUE will raise an exception back to the calling program if an error ocurrs internally</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.GetTempFileNm">
            <summary>
            Uses the System.IO.Path.GetTempFileName() function to get a unique ID, but then deletes the temporary file.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.UnicodeToAscii(System.String)">
            <summary>
            A quick way to convert unicode string to pure ASCII strings.
            </summary>
            <param name="p_sUnicode"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.GetConfigValue(System.String,System.Boolean,System.String,BT.Core.Crypt.CipherName)">
            <summary>
            Optional function for retrieving encrypted config values by config key.
            </summary>
            <param name="configKey">KEY for the config file</param>
            <param name="isEncrypted">TRUE if the config value we are retrieving is encrypted.</param>
            <param name="encryptionKey">The encryption key used to decrypt the config value.</param>
            <param name="cipherName">The cipher algorithm used to decrypt the config value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.EAS.EAGen.EADate">
            <summary>
            A specialized date data type that accepts/returns nulls (converting them to empty strings)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.EADate.GetSQLDate">
            <summary>
            Returns a date in the format YYYYMMDD or an empty string
            </summary>
        </member>
        <member name="M:BT.Core.EAS.EAGen.SetByType(System.Object@,System.Object)">
            <summary>
            Accepts a value and then returns that value "formatted" according to the type of p_Val.
            </summary>
            <param name="p_Val"></param>
            <param name="p_NewVal"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ReturnFileType(System.Int64,System.Boolean)">
            <summary>
            Used to return document "types" for the known file types that BigTime will allow.
            </summary>
            <param name="p_nFileType">1=docx, 2=xlsx, 3=pptx, 4=MPP, 5=VSD, 6=TXT, 7=CSV, 8=EXE, 9=OBJ, 10=PDF, 11=ZIP, 12=MDB</param>
            <param name="p_bMimeType">TRUE to return a mime type (eg -for web service fileType) and FALSE to return a standard document extension).</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ValidateFileContent(System.String,System.Byte[])">
            <summary>
            Each file format has a 'Magic Number' in the first few bytes of its content that uniquely identifies that file content type. 
            Pass in desired content type file byte array and this method will check to ensure that the file being uploaded has 
            content that matches the file content type.  
            </summary>
            <param name="contentType">Can be: image/jpeg, image/png, image/gif, image/tiff, image/bmp, application/pdf</param>
            <param name="fileBytes"></param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.EAS.EAGen.GetValidImageType(System.Byte[])">
            <summary>
            Each file format has a 'Magic Number' in the first few bytes of its content that uniquely identifies that file content type. 
            Pass in the Byte array of the file type being uploaded and the ffollowing unction will return the 'content type' of the file; if it matches the file types 
            we support.
            </summary>
            <param name="fileBytes"></param>
            <returns>content type of uploaded file.</returns>
        </member>
        <member name="T:BT.Core.EAS.EAGen.Registry">
            <summary>
            The functions in this class pull/post data to the system registry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.EAS.EAGen.Registry.Hive">
            <summary>
            Used to access specific registry sections witin EAGEN.Registry (HKEY_LOCAL_MACHINE, etc)
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.EAS.EAGen.INIFile">
            <summary>
            Used to create/read/write values to an old-style INI file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.ErrorListAdd(System.Collections.ArrayList,System.Int64,System.String,System.String,System.String,System.Boolean)">
            <summary>
            A global function used to add an error to an error list in BigTime.
            </summary>
            <param name="p_cErrorList">Error list to populate</param>
            <param name="p_nErr">Error ID</param>
            <param name="p_sErr">Error string</param>
            <param name="p_sErrLoc">Function/method from which the error will be returned</param>
            <param name="p_sRoutine">Name of the routine within which the error ocurred</param>
            <param name="p_bAddToTop">TRUE will add this error to the top of the list instead of the end</param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.EnHex(System.String)">
            <summary>
            Converts a string to a set of HEX values to prevent problems when storing the string to a query string or session variable
            </summary>
            <param name="p_sVal"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.DeHex(System.String)">
            <summary>
            Converts a list of hex values BACK into a string
            </summary>
            <param name="p_sVal"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EAGen.GetSqlSmallDateTimeMin">
            <summary>
            Returns the smallest DateTime within range of the SQL Server smalldatetime data type.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.EAGen.GetSqlSmallDateTimeMax">
            <summary>
            Returns the largest DateTime within range of the SQL Server smalldatetime data type.
            </summary>
        </member>
        <member name="T:BT.Core.EAS.NTProcess">
            <summary>
            This public class has a single shared member (IsLoaded) in order to allow us to quickly check to see if a given windows service is loaded WITHOUT having to load an EAS.APIService object.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.EAS.Hashlist">
            <summary>
            The Hashlist collection supports stepping through an object by KEY or by INDEX (mix of Dictionary and Array)
            </summary>
            <remarks>Use the .Values() collection to pull data by index(integer) or by key(string) </remarks>
        </member>
        <member name="T:BT.Core.EAS.BTException">
            <summary>
            Called from Get/Set property values in order to let the system know that an error is one thrown internally (by BigTime)
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.EAS.XML">
            <summary>
            This class encapsulates XML file node access and is used to access sub-item/attributes without throwing errors if the item is missing.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.XML.RemoveNamespaces(System.String)">
            <summary>
            Library function to remove all reference to xml namespaces from any xml raw text.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.XML.GetSubValue(System.Xml.XmlElement,System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Retrieves the item text from a specified node.
            </summary>
            <param name="p_cXML">The XMLElement to query</param>
            <param name="p_sElName">Element name to locate</param>
            <param name="p_sElName_sub">Sub element name (if appropriate) or attribute name.</param>
            <param name="p_cMngr">If the XML contains namespace definitions, then an nsmanager will be needed to read values.</param>
            <returns>Returns an empty string if the element isn't found.</returns>
            <remarks><para>If the item isn't found with a simple SelectNode, then the method adds descendant-or-self:: to the element name.</para>
            <para>if the <paramref>p_sElName_sub</paramref> parameter begins with @, then the method assumes you are looking for an attribute value.</para>
            </remarks>
        </member>
        <member name="M:BT.Core.EAS.XML.GetSubValueXML(System.Xml.XmlElement,System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Retrieves the INNERXML from within a specified node.
            </summary>
            <param name="p_cXML">The XMLElement to query</param>
            <param name="p_sElName">Element name to locate</param>
            <param name="p_sElName_sub">Sub element name (if appropriate) or attribute name.</param>
            <param name="p_cMngr">If the XML contains namespace definitions, then an nsmanager will be needed to read values.</param>
            <returns>Returns an empty string if the element isn't found.</returns>
            <remarks><para>While this method is similar to the GetSubValue element, this method returns the full XML of the node you are searching for (as a string).</para>
            <para>If the item isn't found with a simple SelectNode, then the method adds descendant-or-self:: to the element name.</para>
            <para>if the <paramref>p_sElName_sub</paramref> parameter begins with @, then the method assumes you are looking for an attribute value.</para>
            </remarks>
        </member>
        <member name="M:BT.Core.EAS.XML.SetSubValue(System.Xml.XmlElement,System.String,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Sets the value of a sub-element within an XML file
            </summary>
            <param name="p_cXML">XMLElement to search/edit</param>
            <param name="p_sElName">Name of the element to locate</param>
            <param name="p_Val">VALUE to set. </param>
            <param name="p_cNSMngr">If the XML contains namespace definitions, then an nsmanager will be needed to read values.</param>
            <returns>TRUE if the element can be located and updated.</returns>
            <remarks><para>If the item isn't found with a simple SelectNode, then the method adds descendant-or-self:: to the element name.</para>
            </remarks>
        </member>
        <member name="M:BT.Core.EAS.XML.ReturnErrorList(System.Xml.XmlElement,System.Collections.ArrayList)">
            <summary>
            Accepts an XMLElement and an empty collection and returns the collection FILLED with sub-items from the XMLElement "ErrorList"
            </summary>
            <param name="p_cXML"></param>
            <param name="p_cERRS"></param>
            <returns></returns>
            <remarks>Errors for transactions posted to the BigTime monitor are stored in the ErrorList item, so we use this function to pull those errors into a collection that can be reported by the front end.</remarks>
        </member>
        <member name="M:BT.Core.EAS.XML.EncodeString(System.String)">
            <summary>
            When XML files are posted to QuickBooks (or pulled from that system), they cannot have raw characters embedded in them.  So, we use this method to convert typical unicode characters into their &amp;# equivalents.
            </summary>
            <param name="p_sVal"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.XML.EncodeStringUnicodeOnly(System.String,System.Boolean)">
            <summary>
            This function, similar to the EncodeString function, can be set to ignore XML characters ("; &amp;; &gt;; &lt;)
            </summary>
            <param name="p_sVal"></param>
            <param name="p_bIgnoreXMLCharacters">TRUE if you would like to leave the 4 xml characters in the text to be encoded</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.BTModelErrorDictionary.AddModelErrorsFromDictionary(System.String,System.Collections.IDictionary)">
            <summary>
            For a DICTIONARY of objects, this will return model errors as ObjectKey.DictionaryKeyValue.FieldName
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.BTModelErrorDictionary.AddModelErrorsFromBigTimeErrorList(System.String,System.Collections.ArrayList)">
            <summary>
            For a DICTIONARY of objects, this will return model errors as ObjectKey.DictionaryKeyValue.FieldName
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.DataErrors.ItemIsNotUnique(System.String,System.String)">
            <summary>
            The {0} field must contain a unique value and there is already a {1} in the system with the value you've entered.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.DatabaseAccessError">
            <summary>
            The system couldn't access your BigTime data.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.ValidationErrors">
            <summary>
            The values entered for this item aren't valid, check the field-specific errors for more details and correct those errors before continuing.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.MissingRequiredParameter(System.String)">
            <summary>
            {0} is a required, and you haven't supplied a valid value for it.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.FailedToSaveSeeDetails">
            <summary>
            The system failed to save the updates you are attempting to make. Take a look at the detailed error log for more information.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.FailedToSave">
            <summary>
            The system failed to save the updates you are attempting to make.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.FailedToSaveNamedItem(System.String)">
            <summary>
            The system wasn't able to save your edits to {0}.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.FailedToCreateNamedItem(System.String)">
            <summary>
            The system could not create a new {0} with these values.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.SecurityViolationMissingPermits(System.Int64,System.Int64)">
            <summary>
            You must have the system permission {0}.{1} in order to make these changes.  Please verify that you have that system right before attempting to continue.
            </summary>
            <param name="PermitSet"></param>
            <param name="PermitId"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.SecurityViolationGeneral">
            <summary>
            You don't have rights to continue, so BigTime has limited your access to this feature.  Talk to your system administrator in order to continue.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.ProductVersionPermission">
            <summary>
            The version of the product you are currently licensed to use doesn't support this feature, so BigTime has limited your access to it.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.ProductVersionPermissionUpgradeToPro">
            <summary>
            The version of the product you are currently licensed to use doesn't support this feature, so BigTime has limited your access to it.  If you'd like to gain access, you can upgrade your subscription to a BigTime Professional in the Tools...Firm Settings area of the system.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.SecurityThisIsntYourObject(System.String)">
            <summary>
            You don't have rights to edit this {0}.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.SecurityNotYourTimeExpense">
            <summary>
            You can only edit time/expense information that belongs to your or to staffers you manage.  Contact your system administrator in order to get rights to edit this entry.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.LastAdminUser">
            <summary>
            Before you revoke system admin permissions for this user, you need to assign them to another active user in your firm.  Otherwise, nobody will have access to the BigTime's admin screen(s).
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.StrongPasswordRequired">
            <summary>
            A strong password is required in order to update the current password.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.SecurityNotYourProject">
            <summary>
            You can only submit time against a project if you are a team member of it.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.SecurityNotYourTask">
            <summary>
            You can only submit time on a task if it is assigned to you or it is unassigned.
            </summary>
        </member>
        <member name="M:BT.Core.EAS.ErrorHelper.SystemErrors.InvalidPassword">
            <summary>
            The password you have provided is invalid.
            </summary>
        </member>
        <member name="T:BT.Core.EAS.Currency">
            <summary>
            VB.Net has no "currency" data type, so we use this type substitute to let the system know when we're working with currency values.
            </summary>
            <remarks>Creating a new object of type currency is just like creating any other type in vb.net
            <code lang="vbnet" title="VB.Net Code Example">
            Dim cCur as new EAS.Currency
            cCur = 123.45
            </code>
            </remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsMyProject(System.Int64)">
            <summary>
            Returns TRUE if the user either <B>HAS PERMISSION TO SEE ALL PROJECTS</B> or <B>IS ON THE PROJECT TEAM</B>
            </summary>
            <param name="p_nPrjSID">SystemID of the project to check</param>
            <returns>Note that we use LOGIN_SECURITY and LOGIN_UID in the _Globals object used to instantiate this class</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsMyTask(System.Int64)">
            <summary>
            Return TRUE if the task is unassigned, is assigned to the current user, or the user is a task admin.
            </summary>
            <param name="taskSid"></param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.MyProjectsOnly(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns a list of Project SIDs where the user either <B>HAS PERMISSION TO SEE ALL PROJECTS</B> or <B>IS ON THE PROJECT TEAM</B>
            </summary>
            <param name="projectSidList">List of SystemIDs' of projects to check</param>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsProjectTeamLead(System.Int64)">
            <summary>
            Returns TRUE if the user is the PROJECT TEAM LEAD 
            </summary>
            <param name="p_nPrjSID">SystemID of the project to check</param>
            <remarks>Note that we use LOGIN_SECURITY and LOGIN_UID in the _Globals object used to instantiate this class</remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsMyStaff(System.Int64)">
            <summary>
            Returns TRUE if the user either <B>HAS PERMISSION TO SEE ALL STAFF</B> or <B>MANAGES THIS STAFF MEMBER'S GROUP</B>
            </summary>
            <param name="p_nStaffSID">StaffSID of the project to check</param>
            <returns>Note that we use LOGIN_SECURITY and LOGIN_UID in the _Globals object used to instantiate this class</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsMyClient(System.Int64)">
            <summary>
            Returns TRUE if the user either <B>HAS PERMISSION TO SEE ALL PROJECTS</B> or <B>IS ON A PROJECT TEAM</B> that is linked to this client.
            </summary>
            <param name="ClientSid">SystemID of the client to check</param>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsMyContact(System.Int64)">
            <summary>
            Returns TRUE if the user either <B>HAS PERMISSION TO SEE ALL PROJECTS</B> or <B>IS ON A PROJECT TEAM</B> that is linked to this contact.
            </summary>
            <param name="ContactSid">SystemID of the contact to check</param>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.GetGroupList(System.String)">
            <summary>
            Accepts a hex number and gets the groupIDs of which this user is a member from that number
            </summary>
            <param name="p_sHEX_Membership">from tblStaff!Security</param>
            <returns>BYTE array with IDs of the groups to which this user belongs</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsRptPermitted(System.String,System.String)">
            <summary>
            DEPRICATD:  Called from the reporting engine's page(s) in order to determine if a user has rights to view a specific report
            </summary>
            <param name="p_sHEX_Report">tblReport_Security!Security</param>
            <param name="p_sHEX_User">tblStaff!Security</param>
            <returns>TRUE if both the user and the report are member(s) of a group (e.g. - both admin, both PM, etc).  ALSO returns true if the report isn't protected (e.g. - available to anyone)</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsPermittedByGroup(System.String)">
            <summary>
            When objects are assigned to security GROUPS, we can use this function to compare the object's security settings to the user's in order to determine if the user has rights to the object.
            Used for reports, report groups, documents and other objects that support a security grant "by group."
            </summary>
            <param name="p_sHEX_Object">tblReport_Security!Security</param>
            <returns>TRUE if both the user and the object are member(s) of a group (e.g. - both admin, both PM, etc).  ALSO returns true if the object isn't protected (e.g. - object's security is null or empty string)</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.GrantPermissionByGroup(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Grants/revokes permissions to/from a specified group (used a lot in the BigTime updates)
            </summary>
            <param name="p_nGroupSID">from stblSecurity_Groups!GroupID</param>
            <param name="p_nPermitSet">PermitSet number</param>
            <param name="p_nPermit">permitID number</param>
            <param name="p_bRevoke">TRUE if the permit should be revoked, not granted</param>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsPermittedByUser(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Pass a User's Security value, a specific PermitSet/ID and get TRUE if the user has that permission
            </summary>
            <param name="p_sHEX_Membership">from tblStaff!Security</param>
            <param name="p_nPermitList"></param>
            <param name="PermitItem"></param>
            <param name="p_nSID"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsPermittedByCurrentUser(System.Int64,System.Int64,System.Int64)">
            <summary>
            This is the shortcut version of IsPermittedByUser - valid ONLY if the StaffSid was supplied when this security context was created (eg - passed in as a parameter of the New() sub)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsPermittedByUserSID(System.Int64,System.Int64,System.Int64)">
            <summary>
            Pass a User's StaffSID value, a specific PermitSet/ID and get TRUE if the user has that permission
            </summary>
            <param name="p_nStaffSID">From tblStaff!StaffSID or, more often, _Globals.VarList.LoginStaffSID</param>
            <param name="p_nPermitList"></param>
            <param name="p_nPermitSID"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.IsGroupMember(System.String,System.Int64)">
            <summary>
            Use this function to see if a user is a member of a specific security group
            </summary>
            <param name="p_sHEX_Membership">Typically, from tblStaff!Security</param>
            <param name="p_nGroupID">stblSecurity_Groups!GroupID</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.ISecurity.AddESignature(BT.Core.Security.ESignatureParams)">
            <summary>
            Called by transactions to create a new record in tblESignature.  Will return that new record's ESIG ID (or raise an error)
            </summary>
            <param name="myParams">Description of properties can be found in the ESignatureParams comments</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.EvalFunctions.And(System.Boolean[])">
            <summary>
            Returns true if all of the booleans in the cond param array are true.
            </summary>
            <param name="cond"></param>
        </member>
        <member name="M:BT.Core.EAS.EvalFunctions.Or(System.Boolean[])">
            <summary>
            If any of the booleans in the cond paramarray are true, returns true
            </summary>
            <param name="cond"></param>
        </member>
        <member name="M:BT.Core.EAS.PasswordHasher.PasswordHasher.#ctor">
            <summary>
            Default hashing algorythim to SHA256
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.EAS.PasswordHasher.PasswordHasher.HashPassword(System.String)">
            <summary>
            Creates a byte array containing the hashed combination of
            a GUID-generated salt value prepended to the password, hashed
            according to the provided algorithm.
            </summary>
            <param name="password">The plaintext password to be hashed</param>
            <returns>A byte array of the concatenated salt and hashed salt/password combination</returns>
        </member>
        <member name="M:BT.Core.EAS.PasswordHasher.PasswordHasher.HashPassword(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Prepends the provided salt to the provided password using the provided
            HashAlgorithm
            </summary>
            <param name="salt">The salt to prepend</param>
            <param name="password">The password</param>
            <param name="hashAlg">The HashAlgorithm to use</param>
            <returns>A byte array containing the hashed salt/password combination.</returns>
        </member>
        <member name="M:BT.Core.EAS.PasswordHasher.PasswordHasher.ComparePassword(System.String,System.Byte[])">
            <summary>
            Compares a plaintext password provided by the user to the
            password stored in a hashed salt/password byte array.
            </summary>
            <param name="password">The user-provided plaintext password for comparison</param>
            <param name="storedPassAndSalt">The stored hashed salt/password combination</param>
            <returns>True if the password provided matches the stored pass, otherwise
            false.</returns>
        </member>
        <member name="M:BT.Core.EAS.PasswordHasher.PasswordHasher.CreateTextString(System.Byte[])">
            <summary>
            Create a human-readable hexadecimal string from the
            byte array by walking the array and converting each byte
            into a 2-digit hexadecimal value.
            </summary>
            <param name="data">The byte array to make human-readable</param>
            <returns>The human-readable string</returns>
        </member>
        <member name="M:BT.Core.EAS.PasswordHasher.PasswordHasher.CreateByteArray(System.String)">
            <summary>
            Transform the provided human-readable hexadecimal string to
            an array of bytes.
            </summary>
            <param name="data">The string to transform</param>
            <returns>The byte array representation of the hexadecimal string</returns>
        </member>
        <member name="T:BT.Core.CryptoRandomThreadSafe2">
            <summary>
            A cryptographically secure implementation of IRandomThreadSafe2
            </summary>
            <remarks>
            For most cases, RandomThreadSafe2 will suffice.  This class is slower but cryptographically secure.
            </remarks>
        </member>
        <member name="T:BT.Core.Util.MarkdownUtil">
            <summary>
            A class used to handle Markdown in any objects or business logic
            </summary>
        </member>
        <member name="M:BT.Core.Util.MarkdownUtil.StripMarkdownTags(System.String)">
            <summary>
            Removes markdown tags from a string
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:BT.Core.Util.JsonSerializer">
            <summary>
            A Json serializer that is capable of deserializing and serializing to an INTERFACE.  This is done using 
            Newtonsoft.Json.  This adds a $type property to each object on SERIALIZATION that stores that classes 
            CONCRETE object implementation.  Then when DESERIALIZING to an interface, that concrete object is instantiated.
            </summary>
        </member>
        <member name="M:BT.Core.Util.JsonSerializer.DeserializeObject``1(System.String)">
            <summary>
            Deserializer using Newtonsoft.Json that is capable of deserializing to an interface by instantiating 
            concrete implementations of that interface.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.Util.JsonSerializer.SerializeObject``1(``0)">
            <summary>
            Serializer using Newtonsoft.Json that stores the concrete implementation of an interface within the 
            serialized JSON.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToSerialize"></param>
            <returns></returns>
        </member>
        <member name="P:BT.Core.Util.OfflineData.IpAddressToLetThrough">
            <summary>
            This contains the IP address of the authprised person to let through
            </summary>
        </member>
        <member name="P:BT.Core.Util.OfflineData.Message">
            <summary>
            A message to display in the Offline View
            </summary>
        </member>
        <member name="P:BT.Core.Util.OfflineHelper.UserIsOffline">
            <summary>
            This is true if we should redirect the user to the Offline View
            </summary>
        </member>
        <member name="M:BT.Core.Util.SFUtilities.ToLightningID(System.String)">
            <summary>
            Convert a 15 character SF Classic ID to an 18 digit SF Lightning ID.
            </summary>
            <remarks> 
            See http://forceguru.blogspot.com/2010/12/how-salesforce-18-digit-id-is.html ... seriously
            </remarks>
        </member>
        <member name="T:BT.Core.Util.SingletonContext">
            <summary>
            Called in order to make sure that only one instance of code running at a time.
            </summary>
        </member>
        <member name="M:BT.Core.Util.SingletonContext.Create(System.String,System.Int32)">
            <summary>
            Factory method to create an empty mutex
            </summary>
        </member>
        <member name="M:BT.Core.Util.SqlConnectivityCheck`1.#ctor(BT.Core.Logger.ILogger)">
            <summary>
            Utility class that attempts to (1) open a connection and (2) execute a command
            based on the database connection string stored in the registry 
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:BT.Core.Util.SqlConnectivityCheck`1.CheckConnectivity">
            <summary>
            Attempts to check the connectivity of both btmaster and btmt1
            </summary>
        </member>
        <member name="M:BT.Core.Util.SqlConnectivityCheck`1.TestConnectionAndCommand(System.String,System.String)">
            <summary>
            Accepts a connection string and performs two checks: (1) opening a connection to that target and (2) executing a simple command.
            </summary>
            <param name="dbnm"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:BT.Core.Util.HashHelper.GetHMACSHA256(System.String,System.String)">
            <summary>
            HMACSHA256 required for authing Mailgun requests
            </summary>
            <param name="message">the message we want to hash</param>
            <param name="secret">our secret key</param>
            <returns>The Base64 Converted String signature</returns>
        </member>
        <member name="M:BT.Core.IRandomThreadSafe2.Next">
            <summary>
            Returns a nonnegative random integer.
            </summary>
        </member>
        <member name="M:BT.Core.IRandomThreadSafe2.Next(System.Int32)">
            <summary>
            Returns a nonnegative random integer that is less than the specified maximum.
            </summary>
        </member>
        <member name="M:BT.Core.IRandomThreadSafe2.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
        </member>
        <member name="M:BT.Core.IRandomThreadSafe2.NextDouble">
            <summary>
            Returns a random floating-point number between 0.0 and 1.0.
            </summary>
        </member>
        <member name="M:BT.Core.IRandomThreadSafe2.NextDouble(System.Double)">
            <summary>
            Returns a random floating-point number between 0.0 and Max.
            </summary>
        </member>
        <member name="M:BT.Core.IRandomThreadSafe2.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a random floating-point number between Min and Max.
            </summary>
        </member>
        <member name="M:BT.Core.IRandomThreadSafe2.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of the specified array of bytes with random numbers.
            </summary>
        </member>
        <member name="T:BT.Core.EMail.EMessageType">
            <summary>The message type of the mailgun e-mail</summary>
        </member>
        <member name="F:BT.Core.EMail.EMessageType.AccountManagement">
            <summary>Emails sent from BigTime regarding password resets and registration</summary>
        </member>
        <member name="F:BT.Core.EMail.EMessageType.StaffNotification">
            <summary>Emails sent for BigTime System notifications</summary>
        </member>
        <member name="F:BT.Core.EMail.EMessageType.InvoiceEmail">
            <summary>Emails sent from the BigTime Invoice Draft page</summary>
        </member>
        <member name="F:BT.Core.EMail.EMessageType.StaffManagement">
            <summary>Emails sent from BigTime regarding staff management.</summary>
        </member>
        <member name="F:BT.Core.EMail.EMessageType.Other">
            <summary>Emails that don't currently fall into any other category</summary>
        </member>
        <member name="T:BT.Core.EMail.IEmail">
            <summary>The interface for Email Messages</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.ToList">
            <summary>list of To recipients</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.CCList">
            <summary>list of CC recipients</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.BCCList">
            <summary>list of BCC recipients</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.From">
            <summary>the from email address to send from</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.ReplyTo">
            <summary>the reply to email address a recipient replies to</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.Subject">
            <summary>The subject of the email</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.Body">
            <summary>the contents of the email</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.IsHtml">
            <summary>an indicator of whether to send the email as html or plain text</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.AttachmentList">
            <summary>list of file attachemnts</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.InlineImageList">
            <summary>list of file attachemnts</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.TrackOpens">
            <summary>Receive webhooks for the email message</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.TrackClicks">
            <summary>Receive webhooks for the email message</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.TagList">
            <summary>Tags that can be used to via the mailgun website</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.CustomVariables">
            <summary>Custom variables we send to mail gun which we recieve back with each webhook request</summary>
        </member>
        <member name="P:BT.Core.EMail.IEmail.MessageType">
            <summary>The Type of email we are sending. IE: invoice email, account email, notification email, other</summary>
        </member>
        <member name="T:BT.Core.EMail.EmailAddress">
            <summary>A class for the complex object Email Address</summary>
        </member>
        <member name="M:BT.Core.EMail.EmailAddress.#ctor(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            constructor for easy email creation
            </summary>
            <param name="p_Nm">The name</param>
            <param name="p_Address">the email</param>
            <param name="p_StaffId">the staff id when applicable</param>
        </member>
        <member name="M:BT.Core.EMail.EmailAddress.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="T:BT.Core.ConcreteConverter`1">
            <summary>
            A converter that can be used by Newtonsoft to deserialize Interface properties to a specific concrete type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:BT.Core.API.API_A">
            <summary>
            Encapsulates WindowsAPI calls into a single class.  Used to show/hide/close other applications, get the system time, convert long path names to short path names, etc.
            </summary>
            <remarks>WindowsAPI calls are discouraged, and only the calls within this module should be used.</remarks>
        </member>
        <member name="M:BT.Core.API.API_A.API_PrinterPortCreate(System.String)">
            <summary>
            Creates a new printer port (used in the setup program)
            </summary>
            <param name="p_sPortName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.API.API_A.Window_Hide(System.String,System.Int64)">
            <summary>
            API call to hide a specific window
            </summary>
            <param name="p_sAppTitle"></param>
            <param name="p_hWnd"></param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.API.API_A.Window_Close(System.String,System.Int64)">
            <summary>
            API call to close a specific window
            </summary>
            <param name="p_sAppTitle"></param>
            <param name="p_hWnd"></param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.API.API_A.Window_Exit(System.String,System.Int64)">
            <summary>
            API call to close a specific window
            </summary>
            <param name="p_sAppTitle"></param>
            <param name="p_hWnd"></param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.API.API_A.Navigate(System.String)">
            <summary>
            Opens the user's default browser and then browses to a specified URL
            </summary>
            <param name="p_sURL"></param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.API.API_A.FileSaveDialog(System.String,System.String,System.String)">
            <summary>
            Opens a SAVE FILE dialog and returns the full name/path of the file to save.
            </summary>
            <param name="p_sTitle">DIALOG TITLE</param>
            <param name="p_sFilter">FILE FILTER (eg. - "All Files|*.*")</param>
            <param name="p_sDefaultExt">Which item in the file filter should be selected by default (eg. - "*.*")</param>
        </member>
        <member name="M:BT.Core.API.API_A.FileOpenDialog(System.String,System.String,System.String)">
            <summary>
            Opens an OPEN FILE dialog and returns the full name/path of the file to open.
            </summary>
            <param name="p_sTitle">DIALOG TITLE</param>
            <param name="p_sFilter">FILE FILTER (eg. - "All Files|*.*")</param>
            <param name="p_sDefaultExt">Which item in the file filter should be selected by default (eg. - "*.*")</param>
        </member>
        <member name="M:BT.Core.API.API_A.DirOpenDialog(System.String)">
            <summary>
            Open DIRECTORY file dialog that returns a specific directory name
            </summary>
            <param name="p_sMsg">DIALOG TITLE</param>
        </member>
        <member name="M:BT.Core.API.API_A.GUID_Date">
            <summary>
            Returns a unique string that uses today's date/time as a base and then appends an "temp file" style name.  We use this to return a GUID set that can be ordered by FIFO or LIFO.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.API.API_A.GUID_IPP">
            <summary>
            Returns a unique string that uses today's date/time as a base and then appends an "temp file" style name.  Used by IPP to provide a 32-digit guid WITH NO DASHES
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.API.API_A.GetNetUserName">
            <summary>
            Returns the name of the current thread's principal
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.API.API_A.GetShortPath(System.String)">
            <summary>
            Converts windows LONG path to short path name
            </summary>
            <param name="p_sFileNm"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.API.API_A.DownloadFile(System.String,System.String)">
            <summary>
            Asks the user's browser to download a file from a specific URL.
            </summary>
            <param name="p_sURL"></param>
            <param name="p_sFileNm"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.API.API_A.CopyAllFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies all of the files from one directory to another.
            </summary>
            <param name="sourceDir"></param>
            <param name="destDir"></param>
            <param name="fRecursive"></param>
            <param name="overWrite"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.API.APIService">
            <summary>
            Contains all of the code we use to control windows services (add, delete, etc)
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.API.APIService.e_ServiceType">
            <summary>
            Used to control windows services (see APIService object for details)
            </summary>
        </member>
        <member name="T:BT.Core.API.APIService.SERVICE_CONTROL">
            <summary>
            Used to control windows services (see APIService object for details)
            </summary>
        </member>
        <member name="T:BT.Core.API.APIService.SERVICE_STATE">
            <summary>
            Used to control windows services (see APIService object for details)
            </summary>
        </member>
        <member name="T:BT.Core.API.APIService.SERVICE_TABLE_ENTRY">
            <summary>
            Used to control windows services (see APIService object for details)
            </summary>
        </member>
        <member name="T:BT.Core.API.APIService.SERVICE_STATUS">
            <summary>
            Used to control windows services (see APIService object for details)
            </summary>
        </member>
        <member name="T:BT.Core.API.APIService.SID_NAME_USE">
            <summary>
            Used to control windows services (see APIService object for details)
            </summary>
        </member>
        <member name="T:BT.Core.BTGlobals.Globals">
            <summary>
            The Globals class contains login data as well as all of the variables used throughout the system.
            </summary>
            <remarks>
            SYNTAX:  Dim _Global as New EAS.Globals
                     Dim _Global as New EAS.Globals("Software\Edison's Attic\SUB2")
            All of the system "data" info should be stored in the registry.
            </remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.#ctor">
            <summary>
            Initialize the object using the default registry location.
            </summary>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.#ctor(System.String)">
            <summary>
            Initialize the object using a specific sub-key in the registry.
            </summary>
            <param name="p_sRegDir">The sub-directory name (e.g. - "Software\Edison's Attic\IEG").</param>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.BTGlobals.Globals.IsValid">
            <summary>
            True if the connection to BigTime was initialized correctly
            </summary>
        </member>
        <member name="P:BT.Core.BTGlobals.Globals.Vocab">
            <summary>
            SortedList that contains an entry for each vocabulary item in the system.
            </summary>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.IIS(System.String)">
            <summary>
            SortedList that contains an entry for each IIS setting item in the system.
            </summary>
        </member>
        <member name="P:BT.Core.BTGlobals.Globals.RegDir">
            <summary>
            Returns the current registry "base" directory.  Note that this value is set when you INITIALIZE this object.
            </summary>
        </member>
        <member name="P:BT.Core.BTGlobals.Globals.RegDirSiteNm">
            <summary>
            Returns the current registry "SITE" name (for multi-site installations).
            </summary>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.RegDirCheck(System.String)">
            <summary>
            Called internally to verify that the string passed to the NEW function is a valid registry section
            </summary>
            <param name="p_sRegDir"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.Initialize">
            <summary>
            Called from the New (Initialize) code to setup global variables for the database we
            are connecting to.
            </summary>
        </member>
        <member name="P:BT.Core.BTGlobals.Globals.SysAccountingCountry">
            <summary>
            Get the ENUM of the country associated with this Accounting System. NA if not applicable.
            </summary>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.InitializeDBVars">
            <summary>
            Reset the database login variables from the registry.  This function is typically called when you initialize the object, and not called on it's own.
            </summary>
            <returns>TRUE if the DB connection is initialized successfully.</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.GlobalVar(System.String,System.String)">
            <summary>
            Sets/Returns a system-wide variable.  Note that this is not the same as the system variables that are cached in the Vars collection.
            </summary>
            <param name="p_sType">IIS, DOC, SMTP, XML, DEFAULT, QBXML_IsUpdate, QBXML_FieldNm</param>
            <param name="p_sVarNm">Name of the variable to be pulled from this list</param>
            <value></value>
            <returns></returns>
            <remarks>IIS pulls from stblSettings_IIS;
            SMTP/XML pull from stblSettings_XML;
            DEFAULT pulls from stblSettings_Default where TblNm.FieldNm = p_sVarNm;
            QBXML items pull from the XML stored in tblXMLXLate_ExtSys;
            </remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.UserPref(System.Int64,System.String)">
            <summary>
            We store IIS preferences in the database instead of in cookies.  This function returns a preference value from the DB for the specified user.
            </summary>
            <param name="p_nStaffSID">StaffSID of the user to query (typically the currently logged in user)</param>
            <param name="p_sPreferenceName">NAME of the preference to return</param>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.LogAddEntry(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Adds a new entry to the LogFile specified (using this object's LogFile parameter).  Log entries will be added to the \HTML\Log\Log_YYYY_MM_DD.dat file if LogFile hasn't been set for the object.
            </summary>
            <param name="p_sLogEntry">Log file entry</param>
            <param name="p_sSource">Name of the function/module from which the log request originates</param>
            <param name="p_cERR">An optional list of errors that will also be logged to the text file.</param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.LogEntityUpdate(System.Int64,BT.Core.EntityLogger.EEventType,BT.Core.ADO.ADOCommand,System.Int64)">
            <summary>
            Global function for logging changes to entity objects in the system. Stores a log to tblEntityLog.
            </summary>
            <param name="entitySID">The SID of the object being modified.</param>
            <param name="eventType">The event type. 0 = create, 1 = update, 2 = delete.</param>
            <param name="entityObject">The ADO command containing the parameters of the entity which we will extract (i.e. the SQLTime entity).</param>
            <param name="userID">The SID of the user taken from the session.</param>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.CalculateCurrency(System.Double,System.Int64)">
            <summary>
            Global function used to convert an amount to the HOME currency (using exchange rates stored in the system).
            </summary>
            <param name="p_nForeignAmt">FOREIGN currency amount to be converted</param>
            <param name="p_nCurrencySID">Currency SID (from tlkpCurrency) from which this amount will be converted</param>
            <returns>An amount in the system's Home Currency</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.GetAutoNumber(System.Int64,System.String,System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Returns an auto-number value based on the parameters passed to the function
            </summary>
            <param name="p_nAutoNumberType">1=Project, 2=Invoice</param>
            <param name="p_sAutoNumberFormat">The string format to be converted (eg - "YYYY-PPP")</param>
            <param name="p_nIDWidth">The maximum width that can be returned by the function.</param>
            <param name="p_dt">A Date value that will be used if the auto-number format calls for one</param>
            <param name="p_nClientSID">The Client SID (SystemID) from which any client-specific data will be pulled.</param>
            <param name="p_nProjectSID">The project SID (SystemID) from which project-specific data will be pulled.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.GetFirmDateShortDateFormat">
            <summary>
            Using the Firms Date format preference, return string in short format i.e. MM/dd/yy
            </summary>
            <returns></returns>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.GetFirmDateYearBeforeMDFormat">
            <summary>
            Using the Firms Date format preference, return string in long format with year before Month and day i.e. yyyy/MM/dd
            </summary>
            <returns></returns>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.GetFirmDateNoYearFormat">
            <summary>
            Using the Firms Date format preference, return string in with no year i.e. MM/dd
            </summary>
            <returns></returns>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.NewADO">
            <summary>
            Returns a ready-to-use ADO object for the current db.  This function will determine which "type" of ado connection to return (direct DB or via web services)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.BTGlobals.Globals.NewAdoTenant">
            <summary>
            Returns a ready-to-use ADO object for the current db.  This function will determine which "type" of ado connection to return (direct DB or via web services)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.ADOReturnValue(System.String)">
            <summary>
            Returns a simple SQL value
            </summary>
            <param name="p_sSQL">SQL SELECT statement that should return a single value</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.Globals.RegVal(System.String,System.String)">
            <summary>
            "Registry" values can be stored in the HKEY_LOCAL_MACHINE, in web.config, or in a custom CONFIG file created by BigTime.  The program doesn't need to know how the machine is setup, it can simply use this function to retrieve "registry" values.
            </summary>
            <param name="p_sKey">Registry "key"</param>
            <param name="p_sVal">Value to query/set</param>
            <value>If we are setting a registry value, pass the value to save to the registry in this parameter</value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:BT.Core.BTGlobals.BTGlobalVarsList.TimesheetSubmissionPeriod">
            <summary>
            1=Weekly; 2=Bi-Weekly; 3=Semi-Monthly; 4=Monthly; 5=SpecializedPeriods
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:BT.Core.BTGlobals.BTGCreate">
            <summary>
            This is the creation factory for BTGlobals objects.  Use the appropriate create functions to return a new BTGlobals object.
            </summary>
        </member>
        <member name="M:BT.Core.BTGlobals.BTGCreate.ByCoNm(System.String,BT.Core.ADO.IRepoSource)">
            <summary>
            Pass a company Id to this function and get a tenant-specific IGlobals object.
            </summary>
            <param name="CoNm">The tenant's companyId</param>
            <param name="RemoteMaster">If this is a remote IGlobals object (eg - BTMaster is pulled from another system -- not the registry on the current system), then supply a BTMaster object in this optional parameter.</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.BTGlobals.BTGCreate.ByTenantId(System.Int64,BT.Core.ADO.IRepoSource)">
            <summary>
            Pass a TenantId to this function and get a tenant-specific IGlobals object.
            </summary>
            <param name="TenantId">The tenant's TenantId value</param>
            <param name="RemoteMaster">If this is a remote IGlobals object (eg - BTMaster is pulled from another system -- not the registry on the current system), then supply a BTMaster object in this optional parameter.</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.BTGlobals.BTGCreate.NewlyProvisioned(System.String)">
            <summary>
            If you attempt to get a Tenant IGlobals object on a DB that does not yet exist, then it will return an error.  So, we created this factory method to return a globals object on an EMPTY tenant store.
            </summary>
            <param name="CoNm"></param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.BTGlobals.BTGCreate.Master">
            <summary>
            Returns the default (master) globals object (used to access authentication data) for the current system.
            </summary>
            <returns></returns>
            <remarks>Note that your system will need to be setup with the appropriate registry settings before you can pull a master repo from BigTime.  For notes on how to setup your system, see the readme file for the BTMonitor project.</remarks>
        </member>
        <member name="M:BT.Core.BTGlobals.BTGCreate.Serialize(BT.Core.BTGlobals.IGlobals)">
            <summary>
            Used by the caching system(s) to serialize a globals object to string.
            </summary>
        </member>
        <member name="M:BT.Core.BTGlobals.BTGCreate.Deserialize(System.String)">
            <summary>
            Used by the caching system(s) to retrieve a serialized globals object.
            </summary>
        </member>
        <member name="P:BT.Core.BTGlobals.IGlobals.IsValid">
            <summary>
            TRUE if the variables have been set for this object.  FALSE means you have an invalid globals object.
            </summary>
        </member>
        <member name="P:BT.Core.BTGlobals.IGlobals.IsBT4Db">
            <summary>
            TRUE if the db to which this globals is connected is BT4, not BT5
            </summary>
        </member>
        <member name="M:BT.Core.BTGlobals.IGlobals.IIS(System.String)">
            <summary>
            Returns an IIS value based on a field name.  Note that this data is cached in the object, so it will get stale.  Calling ResetVars() (or using GlobalVarSet) will reset the cache.
            </summary>
            <param name="p_sFieldNm"></param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.BTGlobals.IGlobals.GlobalVar(System.String,System.String)">
            <summary>
            Returns a global value based on a string name.  Note that this function will pull its value from the DB every time.  It is not cached.
            <para>To pull a cached variable, use the .IIS or .VarsList objects.</para>
            </summary>
            <param name="p_sType">IIS, XML, CURRENT, or QBXML</param>
            <param name="p_sVarNm"></param>
            <returns></returns>
        </member>
        <member name="P:BT.Core.BTGlobals.IGlobals.IsEnterprise">
            <summary>
            TRUE if this is a BT50 "enterprise" database (false if it is BT4 or btmaster)
            </summary>
        </member>
        <member name="P:BT.Core.BTGlobals.IGlobals.IsEnterpriseDB">
            <summary>
            TRUE if this is a BT50 "enterprise" database (false if it is BT4 or btmaster)
            </summary>
        </member>
        <member name="T:BT.Core.RandomThreadSafe">
            <summary>
            Prefer to use the RandomThreadSafe2 class, which is safe for use in async concurrent code.
            </summary>
            <remarks>
            This class relies on a ThreadStatic attribute, which does not play well with the Task Parallel Library and async / await.
            Async client code that references RandomThreadSafe may start on one thread and continue on another.
            This thread switch may occur at any await statement.
            See Stephen Cleary's comment at https://stackoverflow.com/a/26519250/8992299.
            See Marc Gravell's comment at https://stackoverflow.com/a/13010688/8992299.
            </remarks>
        </member>
        <member name="M:BT.Core.TypeIsNumericExtension.IsNumericType(System.Type)">
            <summary>
            Return TRUE if this is a basic NUMERIC data type
            </summary>
        </member>
        <member name="M:BT.Core.DateTimeExtension.ToMillisecondsFromEpoch(System.DateTime)">
            <summary>
            Helper function that returns the datetime object to number of milliseconds
            </summary>
            <param name="p_cDateTime"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.DateTimeExtension.FromMillisecondsFromEpoch(System.Double)">
            <summary>
            converts milli from epoch to a DateTime
            </summary>
            <param name="p_nMilli"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.DateTimeExtension.ToSecondsFromEpoch(System.DateTime)">
            <summary>
            Helper function that returns the datetime object to number of seconds from epoch UTC
            </summary>
            <param name="p_cDateTime"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.DateTimeExtension.SecondsFrom1970(System.DateTime)">
            <summary>
            Returns the number of seconds from 1970-01-01 midnight.  Commonly used to convert a UTC date to a double for json serialization (preserves seconds in the date)
            </summary>
        </member>
        <member name="M:BT.Core.DateTimeExtension.DateOnly(System.Nullable{System.DateTime})">
            <summary>
            Removes timezone data from a date and returns it as DateTimeKind.Unspecified (also removes TIME)
            </summary>
        </member>
        <member name="M:BT.Core.DateTimeExtension.DateOnly(System.DateTime)">
            <summary>
            Removes timezone data from a date and returns it as DateTimeKind.Unspecified (also removes TIME)
            </summary>
        </member>
        <member name="M:BT.Core.DateTimeExtension.Unspecified(System.Nullable{System.DateTime})">
            <summary>
            Removes timezone data from a date and returns it as DateTimeKind.Unspecified
            </summary>
        </member>
        <member name="M:BT.Core.DateTimeExtension.Unspecified(System.DateTime)">
            <summary>
            Removes timezone data from a date and returns it as DateTimeKind.Unspecified
            </summary>
        </member>
        <member name="M:BT.Core.DateTimeExtension.StartOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns the Date of the start of the week for the date provided.  
            </summary>
            <param name="dt"></param>
            <param name="startOfWeek">Use DayOfWeek enum values to set the start of your week (i.e. Monday)</param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.DateTimeExtension.ParseTicks(System.String)">
            <summary>
            Parses Ticks and returns a datetime
            </summary>
            <param name="sTicks">Ticks as a string. possibly from an IIS setting.</param>
            <returns>a nullable DateTime</returns>
        </member>
        <member name="M:BT.Core.DateTimeExtension.GetWorkingDays(System.DateTime,System.DateTime)">
            <summary>
            Returns number of working days between two dates
            </summary>
            <param name="from">Start date as DateTime.</param>
            <param name="to">End date as DateTime.</param>
            <returns>Number of Working days between the 2 dates</returns>
        </member>
        <member name="M:BT.Core.DateTimeExtension.WeekdayNumber(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns Day of Week based on start day 
            </summary>
            <param name="dt"></param>
            <param name="startOfWeek">Start Day of the Week.</param>
            <returns>Week day number relative to the start day of the week</returns>
        </member>
        <member name="M:BT.Core.DictionaryExtension.MergeLeft``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            merges all KVP from 1 or more dictionaries.  when dupe keys take precedent over earlier keys
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="cur"></param>
            <param name="others"></param>
            <returns>Usage NewDictionary = OldDictionary.MergeLeft(Dictionary2)</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.DictionaryExtension.HasDateValue``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            if the dictionary (a) contains the key supplied and (b) that key's value is a date .. this will return true.  Othewise, it will return false (no key is added to the dictionary).
            </summary>
            <param name="key">The key value to locate</param>
            <param name="d">The dictionary</param>
        </member>
        <member name="M:BT.Core.DictionaryExtension.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Helper function used to provide a default return value if the key does not exist in the dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="cur"></param>
            <param name="key"></param>
            <param name="defaultValue">The value to return is the key is not in dictionary</param>
            <returns>value from the key or the default value</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.DictionaryExtension.CastValueOrDefault``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2)">
            <summary>
            Helper function used to provide a default return value if the key does not exist in the dictionary
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="cur"></param>
            <param name="key"></param>
            <param name="defaultValue">The value to return is the key is not in dictionary</param>
            <returns>value from the key or the default value</returns>
            <remarks></remarks>
        </member>
        <member name="M:BT.Core.StringExt.EncodeForJavascript(System.String)">
            <summary>
            Encodes all special characters using \ encoding (eg - " becomes \"  &lt; becomes \u003c  etc)
            </summary>
        </member>
        <member name="M:BT.Core.StringExt.EncodeForUrl(System.String)">
            <summary>
            Encodes all special characters using \ encoding (eg - " becomes \"  &lt; becomes \u003c  etc)
            </summary>
        </member>
        <member name="M:BT.Core.StringExt.EncodeForHtml(System.String)">
            <summary>
            Encodes all special characters using &amp; notation:  (eg - quotes become '&amp;quot;', etc)
            </summary>
        </member>
        <member name="M:BT.Core.StringExt.SanitizeForHtml(System.String,System.Boolean)">
            <summary>
            Removes the basic HTML evil characters (GT; LT; QUOT; PERCENT)
            </summary>
            <param name="p_String"></param>
            <param name="RemoveQuotations">TRUE if double quotes should be removed from the string</param>
        </member>
        <member name="M:BT.Core.StringExt.FixForSQL(System.String)">
            <summary>
            Shortcut to pack single quotes (eg - O'Connor becomes O''Connor) to make them SQL safe
            </summary>
        </member>
        <member name="M:BT.Core.StringExt.TryGetTrimmedString(System.String)">
            <summary>
            Failsafe extension to get trimmed string also safely handles nulls, empty and whitespace by returning empty string.
            </summary>
        </member>
        <member name="M:BT.Core.StringExt.TryParse``1(System.String,``0)">
            <summary>
            Failsafe extension to convert a string to a specific datatype (or return default/nothing)
            </summary>
        </member>
        <member name="M:BT.Core.StringExt.Chr(System.Int32)">
            <summary>
            The VB.NET EQUIVALENT of Strings.Chr - there is no built in equivalent function for C#.
            This function will convert the input character code into a character symbol using en-US culture.
            NOTE casting a code as a (char) in C# will not produce the same results.
            </summary>
            <param name="p_intByte"></param>
            <returns></returns>
        </member>
        <member name="M:BT.Core.StringExt.ContainsNonANSICharacter(System.String)">
            <summary>
            Returns TRUE if any characters inside the string are not in the set of ANSI characters (the set includes ASCII characters)
            </summary>
            <remarks>ANSI character set is also known as Latin 1 Windows</remarks>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:BT.Core.BooleanFormatter">
            <summary>
            Used by various MERGE functions in order to easily format boolean data (e.g. - the format string "yes;no" returns "yes" if a boolean value is true and "no" if it is false.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:My.Resources.DataErrors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.CannotBeBlank">
            <summary>
              Looks up a localized string similar to This value cannot be blank/empty..
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.ColumnMismatch">
            <summary>
              Looks up a localized string similar to The columns are out of order.
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.DuplicateEntry">
            <summary>
              Looks up a localized string similar to The value you&apos;ve entered already exists in your system and it needs to be unique..
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.FieldContainScript">
            <summary>
              Looks up a localized string similar to This field contains client side javascript..
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.GenericDBError">
            <summary>
              Looks up a localized string similar to The system returned an error..
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.GenericDuplicate">
            <summary>
              Looks up a localized string similar to This entry is a duplicate of one that already exists in the system..
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.IntSize">
            <summary>
              Looks up a localized string similar to Values for this field cannot exceed 2,147,483,647.
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.ItemIsNotUnique">
            <summary>
              Looks up a localized string similar to The {0} field must contain a unique value and there is already {1} in the system with the value you&apos;ve entered..
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.MoneySize">
            <summary>
              Looks up a localized string similar to That&apos;s a big number!  BigTime limits this field to $922,337,203,685,477.00.
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.SmallmoneySize">
            <summary>
              Looks up a localized string similar to This field is meant to store smaller values (less than $214,000.00).
            </summary>
        </member>
        <member name="P:My.Resources.DataErrors.StringLength">
            <summary>
              Looks up a localized string similar to Values are limited to {0} characters in length.
            </summary>
        </member>
        <member name="T:My.Resources.SystemErrors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.DatabaseAccessGeneralError">
            <summary>
              Looks up a localized string similar to The system couldn&apos;t access your BigTime data..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.FailedToCreateNamedItem">
            <summary>
              Looks up a localized string similar to The system could not create a new {0} with these values..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.FailedToSave">
            <summary>
              Looks up a localized string similar to The system failed to save the updates you are attempting to make..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.FailedToSaveNamedItem">
            <summary>
              Looks up a localized string similar to The system wasn&apos;t able to save your edits to {0}..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.FailedToSaveSeeDetails">
            <summary>
              Looks up a localized string similar to The system failed to save the updates you are attempting to make. Take a look at the detailed error log for more information..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.InvalidPassword">
            <summary>
              Looks up a localized string similar to The password you have entered is invalid..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.LastAdminUser">
            <summary>
              Looks up a localized string similar to Before you revoke system admin permissions for this user, you need to assign them to another active user in your firm.  Otherwise, nobody will have access to the BigTime&apos;s admin screen(s)..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.MissingRequiredValue">
            <summary>
              Looks up a localized string similar to {0} is a required, and you haven&apos;t supplied a valid value for it..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.ProductVersionPermission">
            <summary>
              Looks up a localized string similar to The version of the product you are currently licensed to use doesn&apos;t support this feature, so BigTime has limited your access to it..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.ProductVersionPermissionUpgradeToPro">
            <summary>
              Looks up a localized string similar to The version of the product you are currently licensed to use doesn&apos;t support this feature, so BigTime has limited your access to it.  If you&apos;d like to gain access, you can upgrade your subscription to a BigTime Professional in the Tools...Firm Settings area of the system..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.SecurityNotYourProject">
            <summary>
              Looks up a localized string similar to You don&apos;t have rights to this project.  Contact your system administrator in order to get rights to this project..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.SecurityNotYourTask">
            <summary>
              Looks up a localized string similar to You don&apos;t have rights to this task.  Contact your system administrator in order to get rights to this task..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.SecurityNotYourTimeExpense">
            <summary>
              Looks up a localized string similar to You can only edit time/expense information that belongs to your or to staffers you manage.  Contact your system administrator in order to get rights to edit this entry..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.SecurityThisIsntYourObject">
            <summary>
              Looks up a localized string similar to You don&apos;t have rights to edit this {0}..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.SecurityViolationGeneral">
            <summary>
              Looks up a localized string similar to You don&apos;t have rights to continue, so BigTime has limited your access to this feature.  Talk to your system administrator in order to continue..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.SecurityViolationMissingPermits">
            <summary>
              Looks up a localized string similar to You must have the system permission {0}.{1} in order to make these changes.  Please verify that you have that system right before attempting to continue..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.StrongPasswordRequiredError">
            <summary>
              Looks up a localized string similar to Passwords must have at least 8 characters.  Passwords can&apos;t contain the username or the word &quot;password&quot;.  Password must use at least 2 of the following character types: letters, digits and non-alpha numeric characters.  You must select a password that has not been previously used.  You must select a less commonly used password..
            </summary>
        </member>
        <member name="P:My.Resources.SystemErrors.ValidationErrorsDuringSave">
            <summary>
              Looks up a localized string similar to The values entered for this item aren&apos;t valid, check the field-specific errors for more details and correct those errors before continuing..
            </summary>
        </member>
        <member name="T:My.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:My.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:My.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
